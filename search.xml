<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>H5唤起App</title>
    <url>/2020/06/26/H5%E5%94%A4%E8%B5%B7App/</url>
    <content><![CDATA[<blockquote>
<p>最近总接到落地页的需求，落地页的职责主要是引流，有以下几种类型<br>1、引导已经下载App的用户打开App<br>2、引导未下载App的用户下载App<br>3、引导未注册的用户注册<br>4、引导已经注册的用户进入我们的主页或者其他的操作<br>从数据上可以体现在用户停留在App的时间多了，或者增加了用户量</p>
</blockquote>
<h3 id="唤起App主要的媒介是什么呢？"><a href="#唤起App主要的媒介是什么呢？" class="headerlink" title="唤起App主要的媒介是什么呢？"></a>唤起App主要的媒介是什么呢？</h3><h4 id="URL-Scheme"><a href="#URL-Scheme" class="headerlink" title="URL Scheme"></a>URL Scheme</h4><p>URL Scheme的组成</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[scheme:][<span class="comment">//authority][path][?query][#fragment]</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>App</th>
<th>微信</th>
<th>支付宝</th>
<th>淘宝</th>
<th>微博</th>
</tr>
</thead>
<tbody><tr>
<td>URL Scheme</td>
<td>weixin://</td>
<td>alipay://</td>
<td>taobao://</td>
<td>sinaweibo://</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     行为(应用的某个功能)    </span><br><span class="line">            |</span><br><span class="line">scheme:&#x2F;&#x2F;[path][?query]</span><br><span class="line">   |               |</span><br><span class="line">应用标识       功能需要的参数</span><br></pre></td></tr></table></figure>

<p><code>URL Scheme 在 ios 9+ 上诸如 safari、UC、QQ浏览器中， iframe 均无法成功唤起 APP，只能通过 window.location 才能成功唤端。</code></p>
<h4 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h4><p>安卓的原生谷歌浏览器自从 chrome25 版本开始对于唤端功能做了一些变化，URL Scheme 无法再启动Android应用。 例如，通过 iframe 指向 weixin://，即使用户安装了微信也无法打开。所以，APP需要实现谷歌官方提供的 intent: 语法，或者实现让用户通过自定义手势来打开APP。<br><code>安卓版本 4.4.4 以上机型的安卓自带浏览器、chrome 浏览器，需要通过 intent 跳转</code><br><a href="https://developer.chrome.com/multidevice/android/intents" target="_blank" rel="noopener">intents文档</a></p>
<ul>
<li>Intent 语法<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intent:</span><br><span class="line">   HOST&#x2F;URI-path &#x2F;&#x2F; Optional host </span><br><span class="line">   #Intent; </span><br><span class="line">      package&#x3D;[string]; </span><br><span class="line">      action&#x3D;[string]; </span><br><span class="line">      category&#x3D;[string]; </span><br><span class="line">      component&#x3D;[string]; </span><br><span class="line">      scheme&#x3D;[string]; </span><br><span class="line">   end;</span><br></pre></td></tr></table></figure>
如果用户未安装 APP，则会跳转到系统默认商店。当然，如果你想要指定一个唤起失败的跳转地址，添加下面的字符串在 end; 前就可以了:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">S.browser_fallback_url&#x3D;[encoded_full_url]</span><br></pre></td></tr></table></figure></li>
<li>示例<br>下面是打开 Zxing 二维码扫描 APP 的 intent。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intent:</span><br><span class="line">   &#x2F;&#x2F;scan&#x2F;</span><br><span class="line">   #Intent; </span><br><span class="line">      package&#x3D;com.google.zxing.client.android; </span><br><span class="line">      scheme&#x3D;zxing; </span><br><span class="line">   end;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;intent:&#x2F;&#x2F;scan&#x2F;#Intent;scheme&#x3D;zxing;package&#x3D;com.google.zxing.client.android;S.browser_fallback_url&#x3D;http%3A%2F%2Fzxing.org;end&quot;&gt; Take a QR code &lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<h4 id="Universal-Link"><a href="#Universal-Link" class="headerlink" title="Universal Link"></a>Universal Link</h4><h4 id="为什么要使用-Universal-Link"><a href="#为什么要使用-Universal-Link" class="headerlink" title="为什么要使用 Universal Link"></a>为什么要使用 Universal Link</h4></li>
</ul>
<p>传统的 Scheme 链接有以下几个痛点：</p>
<ul>
<li>在 ios 上会有确认弹窗提示用户是否打开，对于用户来说唤端，多出了一步操作。若用户未安装 APP ，也会有一个提示窗，告知我们 “打不开该网页，因为网址无效”</li>
<li>传统 Scheme 跳转无法得知唤端是否成功，Universal Link 唤端失败可以直接打开此链接对应的页面</li>
<li>Scheme 在微信、微博、QQ浏览器、手百中都已经被禁止使用，使用 Universal Link 可以避开它们的屏蔽（ 截止到 18年8月21日，微信和QQ浏览器已经禁止了 Universal Link，其他主流APP未发现有禁止 ）</li>
</ul>
<h4 id="如何让-APP-支持-Universal-Link"><a href="#如何让-APP-支持-Universal-Link" class="headerlink" title="如何让 APP 支持 Universal Link"></a>如何让 APP 支持 Universal Link</h4><p>有大量的文章会详细的告诉我们如何配置，你也可以去看<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2" target="_blank" rel="noopener">官方文档</a>，我这里简单的写一个12345。</p>
<ol>
<li>拥有一个支持 <strong>https</strong> 的域名</li>
<li>在 <a href="https://developer.apple.com/" target="_blank" rel="noopener">开发者中心</a> ，Identifiers 下 AppIDs 找到自己的 App ID，编辑打开 Associated Domains 服务。</li>
<li>打开工程配置中的 Associated Domains ，在其中的 Domains 中填入你想支持的域名，必须以 <code>applinks:</code> 为前缀</li>
<li>配置 <code>apple-app-site-association</code> 文件，文件名必须为 <code>apple-app-site-association</code> ，<strong>不带任何后缀</strong></li>
<li>上传该文件到你的 HTTPS 服务器的 <strong>根目录</strong> 或者 <code>.well-known</code> 目录下</li>
</ol>
<h4 id="Universal-Link-配置中的坑"><a href="#Universal-Link-配置中的坑" class="headerlink" title="Universal Link 配置中的坑"></a>Universal Link 配置中的坑</h4><p>这里放一下我们在配置过程中遇到的坑，当然首先你在配置过程中必须得严格按照上面的要求去做，尤其是加粗的地方。</p>
<ul>
<li>域名问题</li>
</ul>
<p>Universal Link 支持的域名最多只能支持到二级域名，如果你用到了三级域名，Universal Link 唤端是不会生效的。</p>
<ul>
<li>跨域问题</li>
</ul>
<p>IOS 9.2 以后，必须要触发跨域才能支持 Universal Link 唤端。</p>
<p>IOS 那边有这样一个判断，如果你要打开的 Universal Link 和 当前页面是同一域名，ios 尊重用户最可能的意图，直接打开链接所对应的页面。如果不在同一域名下，则在你的 APP 中打开链接，也就是执行具体的唤端操作。</p>
<ul>
<li>Universal Link 是空页面</li>
</ul>
<p>Universal Link 本质上是个空页面，如果未安装 APP，Universal Link 被当做普通的页面链接，自然会跳到 404 页面，所以我们需要将它绑定到我们的中转页或者下载页。</p>
<h4 id="唤端方式"><a href="#唤端方式" class="headerlink" title="唤端方式"></a>唤端方式</h4><ul>
<li><p><code>Android</code>中，不同浏览器对唤起APP有严重的兼容性问题，主要处理方案有以下几种：<br>1、window.location.href<br>2、通过创建 iframe 并为其 src 赋值（主要）<br>3、通过 intent<br>4、通过制造不可见 a 链接，并触发点击</p>
</li>
<li><p><code>ios</code>中，不同浏览器对唤起APP有严重的兼容性问题，主要处理方案有以下几种：<br>1、系统版本在 8 以下时，可以监听页面的 pagehide / visibilitychange 事件。<br>2、 window.location.href （主要）<br><code>系统版本大于 8 以后可以 URL scheme 进行跳转。
IOS9  可以使用 universal Link</code></p>
</li>
</ul>
<p>这里我们结合了两种来处理。</p>
<h4 id="判断唤端是否成功"><a href="#判断唤端是否成功" class="headerlink" title="判断唤端是否成功"></a>判断唤端是否成功</h4><blockquote>
<p>在浏览器实际上是没有能力判断手机里是否安装了某个App的，所以只能够采取一种投机取巧的方式。APP 如果被唤起的话，页面就会进入后台运行。setInterval 在 ios 中不会停止运行，在 android 中停止运行。</p>
</blockquote>
<ul>
<li>ios 通过 document.hidden 和 document.webkitHidden 属性来判断 APP 在 ios 中是否被正常唤起，2000ms 内，页面转入后台运行，document.hidden 会返回 true，代表唤端成功，反之则代表失败。</li>
<li>Android 我们的判断条件比预期时间多设置了 500ms，所以如果安卓中 setInterval 内的函数执行 100 次以内所费时间超过 2500ms，则说明 APP 唤起成功，反之则代表失败。<br>在JavaScript中判断页面是否进入后台来判断打开成功。Html5提供了下列事件和属性可以利用：<br>pagehide : 页面隐藏时触发<br>visibilitychange : 页面隐藏没有在当前显示时触发(切换tab也会触发该事件)<br>document.hidden ： 当页面隐藏时，该值为true，显示时为false<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> initialTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> waitTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> checkOpen = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   count++;</span><br><span class="line">   waitTime = <span class="keyword">new</span> <span class="built_in">Date</span>() - initialTime;</span><br><span class="line">   <span class="keyword">if</span> (waitTime &gt; <span class="number">2500</span>) &#123;</span><br><span class="line">      clearInterval(checkOpen);</span><br><span class="line">      cb();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (counter &lt; <span class="number">100</span>) <span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">const</span> hide = <span class="built_in">document</span>.hidden || <span class="built_in">document</span>.webkitHidden;</span><br><span class="line">   <span class="keyword">if</span> (!hide) &#123;</span><br><span class="line">      cb(); <span class="comment">// 唤端失败的回调函数</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果唤端失败（APP 未安装），我们总是要做一些处理的，可以是跳转下载页，可以是 ios 下跳转 App Store… 但是Js 并不能提供给我们获取 APP 唤起状态的能力，Android Intent 以及 Universal Link 倒是不用担心，它们俩的自身机制允许它们唤端失败后直接导航至相应的页面，但是 URL Scheme 并不具备这样的能力，所以我们只能通过一些很 hack 的方式来实现 APP 唤起检测功能。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = &#123;</span><br><span class="line">    getBrowser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> u = navigator.userAgent,</span><br><span class="line">            app = navigator.appVersion;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            trident: u.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span>, <span class="comment">//IE内核</span></span><br><span class="line">            presto: u.indexOf(<span class="string">'Presto'</span>) &gt; <span class="number">-1</span>, <span class="comment">//opera内核</span></span><br><span class="line">            webKit: u.indexOf(<span class="string">'AppleWebKit'</span>) &gt; <span class="number">-1</span>, <span class="comment">//苹果、谷歌内核</span></span><br><span class="line">            gecko: u.indexOf(<span class="string">'Gecko'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'KHTML'</span>) == <span class="number">-1</span>, <span class="comment">//火狐内核</span></span><br><span class="line">            opera: u.indexOf(<span class="string">'Opera'</span>) &gt; <span class="number">-1</span>,</span><br><span class="line">            chrome: u.indexOf(<span class="string">'Chrome'</span>) &gt; <span class="number">-1</span>,</span><br><span class="line">            firefox: u.indexOf(<span class="string">'Firefox'</span>) &gt; <span class="number">-1</span>,</span><br><span class="line">            safari: u.indexOf(<span class="string">'Safari'</span>) &gt; <span class="number">-1</span>, <span class="comment">//注意chrome浏览器此项也为true，非chrome且此项为true则可确定为Safari</span></span><br><span class="line">            ie: u.indexOf(<span class="string">'compatible'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'MSIE'</span>) &gt; <span class="number">-1</span> &amp;&amp; u.indexOf(<span class="string">'Gecko'</span>) == <span class="number">-1</span>,</span><br><span class="line">            mobile: u.search(<span class="regexp">/AppleWebKit.*Mobile/</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为移动终端</span></span><br><span class="line">            ios: u.search(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>) &gt; <span class="number">-1</span>, <span class="comment">//ios终端</span></span><br><span class="line">            android: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span>, <span class="comment">//android终端</span></span><br><span class="line">            winPhone: u.search(<span class="regexp">/Windows Phone/</span>) &gt; <span class="number">-1</span>, <span class="comment">//windows phone终端</span></span><br><span class="line">            iPhone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否为iPhon</span></span><br><span class="line">            iPad: u.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否iPad</span></span><br><span class="line">            webApp: u.indexOf(<span class="string">'Safari'</span>) == <span class="number">-1</span>, <span class="comment">//是否Safari web应该程序，没有头部与底部</span></span><br><span class="line">            weibo: u.search(<span class="regexp">/WeiBo/i</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否微博</span></span><br><span class="line">            weixin: u.search(<span class="regexp">/MicroMessenger/i</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否微信</span></span><br><span class="line">            qq: u.search(<span class="regexp">/\sQQ/i</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否QQ</span></span><br><span class="line">            mQQ: u.search(<span class="regexp">/MQQBrowser/</span>) &gt; <span class="number">-1</span>, <span class="comment">//是否QQ手机浏览器</span></span><br><span class="line">            uc: u.search(<span class="regexp">/UCBrowser/</span>) &gt; <span class="number">-1</span> <span class="comment">//是否UC浏览器</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;(),</span><br><span class="line">  getIOSVersion:  <span class="function"><span class="keyword">function</span> <span class="title">getIOSVersion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> verion = navigator.appVersion.match(<span class="regexp">/OS (\d+)_(\d+)_?(\d+)?/</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">parseInt</span>(verion[<span class="number">1</span>], <span class="number">10</span>);</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * [evokeApp 唤起APP]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;[Object]&#125;</span> </span>config  [跳转的URL]</span></span><br><span class="line"><span class="comment"> * config.ios.url &#123;[String]&#125; [iOS跳转的URL]</span></span><br><span class="line"><span class="comment"> * config.ios.data &#123;[String]&#125; [iOS URL参数]</span></span><br><span class="line"><span class="comment"> * config.ios.callback &#123;[function]&#125; //android的回掉如果没有下载app就执行操作</span></span><br><span class="line"><span class="comment"> * config.android.url &#123;[String]&#125; [android跳转的URL]</span></span><br><span class="line"><span class="comment"> * config.android.data &#123;[String]&#125; [android URL参数]</span></span><br><span class="line"><span class="comment"> * config.android.callback &#123;[function]&#125; //android的回掉如果没有下载app就执行操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> evokeApp = <span class="function">(<span class="params">config</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="comment">//对微信，微博，qq做处理弹窗</span></span><br><span class="line"><span class="keyword">if</span> (browser.versions.weibo || browser.versions.weixin || browser.versions.qq) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">let</span> browserVersions = browser.versions;</span><br><span class="line"><span class="keyword">let</span> evokeAppURL = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">let</span> cb;</span><br><span class="line">    <span class="keyword">if</span> (browserVersions.ios) &#123;</span><br><span class="line">        evokeAppURL = config.ios.data ? <span class="string">'authority://'</span> + config.ios.url + <span class="string">'?'</span> + config.ios.dataArr.join(<span class="string">'&amp;'</span>) : <span class="string">'authority://'</span> + config.ios.url;</span><br><span class="line">cb = config.ios.callback;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (browserVersions.android) &#123;</span><br><span class="line">      evokeAppURL = config.android.data ? <span class="string">'authority://'</span> + config.android.url + <span class="string">'?'</span> + config.android.dataArr.join(<span class="string">'&amp;'</span>) : <span class="string">'authority://'</span> + config.android.url;</span><br><span class="line">cb = config.android.callback;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="keyword">const</span> initialTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> waitTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> checkOpen = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   count++;</span><br><span class="line">   waitTime = <span class="keyword">new</span> <span class="built_in">Date</span>() - initialTime;</span><br><span class="line">   <span class="keyword">if</span> (waitTime &gt; <span class="number">2500</span>) &#123;</span><br><span class="line">      clearInterval(checkOpen);</span><br><span class="line">      cb &amp;&amp; cb();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (counter &lt; <span class="number">100</span>) <span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">const</span> hide = <span class="built_in">document</span>.hidden || <span class="built_in">document</span>.webkitHidden;</span><br><span class="line">   <span class="keyword">if</span> (!hide) &#123;</span><br><span class="line">      cb &amp;&amp; cb(); <span class="comment">// 唤端失败的回调函数</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>1、h5在微信中无法唤醒App，需要“用浏览器打开”<br>微信对所有的分享连接做了scheme屏蔽，也就是说分享连接中所有对于scheme的调用都被微信封掉了。</p>
<ol start="2">
<li><p>在询问是否打开APP的时候，如果选择了“取消”，则再唤起APP的时候会不起作用。目前并没有什么解决方案，在chrome Android,UC Android上会复现问题。需再次刷新页面才行。</p>
</li>
<li><p>在ios手机中，用location.href唤起app，本地如果没装app，会弹窗提示<code>safari浏览器打不开该网页，网址无效</code>，后面在用location.href来下载安装包的话也会显示同样的错误，即使你的下载链接是有效的。解决办法：IOS9及以上使用  <strong><a href="https://www.jianshu.com/p/734c3eff8feb" target="_blank" rel="noopener">Universal Links</a></strong>。</p>
</li>
</ol>
<p><a href="https://suanmei.github.io/2018/08/23/h5_call_app/" target="_blank" rel="noopener">感谢作者</a><br><a href="https://github.com/AlanZhang001/H5CallUpNative" target="_blank" rel="noopener">参考博客</a><br><a href="https://awhisper.github.io/2017/09/02/universallink/" target="_blank" rel="noopener">实现文章</a></p>
<h2 id="问题跨域"><a href="#问题跨域" class="headerlink" title="问题跨域"></a>问题跨域</h2><p>前端开发经常面临跨域问题，恩Universal Link也有跨域问题，但不一样的是，Universal Link，必须要求跨域，如果不跨域，就不行，就失效，就不工作。（iOS 9.2之后的改动，苹果就这么规定这么设计的）</p>
<p>这也是上面拿知乎举例子的时候重点强调的一个问题，知乎为什么使用<code>oia.zhihu.com</code>做Universal Link？</p>
<ul>
<li>假如当前网页的域名是 A</li>
<li>当前网页发起跳转的域名是 B</li>
<li>必须要求 B 和 A 是不同域名，才会触发Universal Link</li>
<li>如果B 和 A 是相同域名，只会继续在当前WebView里面进行跳转，哪怕你的Universal Link一切正常，根本不会打开App</li>
</ul>
<p>是不是不太好理解，那直接拿知乎举例子</p>
<p><a href="https://www.zhihu.com/question/22914651" target="_blank" rel="noopener">https://www.zhihu.com/question/22914651</a></p>
<p>知乎的一般网页URL都是<code>www.zhihu.com</code>域名，你在微信朋友圈看到了知乎的问题分享，如果copy url 你就能看到这样的链接<br>微信里其实是屏蔽Schema的，但是你依然能看到大大的一个按钮App内打开，这确实就是通过Universal Link来实现的，但如果知乎把Universal Link 配在了<a href="http://www.zhihu.com域名，那么即便已经安装了App，Universal" target="_blank" rel="noopener">www.zhihu.com域名，那么即便已经安装了App，Universal</a> Link也是不会生效的。</p>
<p>一般的公司都会有自己的主域名，比如知乎的<a href="http://www.zhihu.com，在各处分享传播的时候，也都是直接分享基于主域名的url，但为了解决苹果强制要求跨域才生效的问题，Universal" target="_blank" rel="noopener">www.zhihu.com，在各处分享传播的时候，也都是直接分享基于主域名的url，但为了解决苹果强制要求跨域才生效的问题，Universal</a> Link就不能配置在主域名下，于是知乎才会准备一个oia.zhihu.com域名，专为Universal Link使用，不会跟任何主动传播分享的域名撞车，从而在任何活动WAP页面里，都能顺利让Universal Link生效。</p>
<p>简单一句话</p>
<p>只有当前webview的url域名，与跳转目标url域名不一致时，Universal Link 才生效<br>Universal Link不是必须通过a标签的href来跳转，我遇到一个问题就是我的页面没有识别Universal Link，因为异步渲染页面，导致没有解析出来Universal Link，加了一个隐藏的a标签，href配置上Universal Link，页面里面所有需要跳转Universal Link都会被识别</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>H5wakeUpAPP</category>
      </categories>
      <tags>
        <tag>JavaScript、移动开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx之OCSP stapling配置</title>
    <url>/2020/03/03/Nginx%E4%B9%8BOCSP-stapling%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p>OCSP stapling是Https优化方案之一，将原本需要客户端实时发起的 OCSP 请求转嫁给服务端；</p>
</blockquote>
<ul>
<li>在线证书状态协议（Online Certificate Status Protocol），简称 OCSP，是一个用于获取 X.509 数字证书撤销状态的网际协议，在 RFC 6960 中定义。OCSP 用于检验证书合法性，查询服务一般由证书所属 CA 提供。OCSP 查询的本质，是一次完整的 HTTP 请求加响应的过程，这中间涵括的 DNS 查询、建立 TCP 连接、Web 端工作等步骤，都将耗费更多时间，使得建立 TLS 花费更多时长。</li>
<li>OCSP存在隐私和性能问题。<br>1、浏览器直接去请求第三方CA(Certificate Authority, 数字证书认证机构)，会暴露网站的访客(CA 机构会知道哪些用户在访问我们的网站)；<br>2、浏览器进行OCSP查询会降低HTTPS性能(访问我们的网站会变慢) OCSP实时查询会增加客户端的性能开销。</li>
</ul>
<p>后来，OCSP Stapling 出现了。将原本需要客户端实时发起的 OCSP 请求转嫁给服务端，Web 端将主动获取 OCSP 查询结果，并随证书一起发送给客户端，以此让客户端跳过自己去寻求验证的过程，提高 TLS 握手效率。 可以提高HTTPS性能。</p>
<h5 id="在线校验"><a href="#在线校验" class="headerlink" title="在线校验"></a>在线校验</h5><ul>
<li>此方式需要支持服务器能够主动访问证书校验服务器才能生效，并且在每次重启nginx的时候会主动请求一次，如果网络不通会导致nginx启动缓慢。<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name  xx.xx.com;</span><br><span class="line">    index index.html index.htm index.jsp;</span><br><span class="line"></span><br><span class="line">    ssl_certificate         server.pem;#证书的.cer文件路径</span><br><span class="line">    ssl_certificate_key     server-key.pem;#证书的.key文件</span><br><span class="line"></span><br><span class="line">    # 开启 OCSP Stapling ---当客户端访问时 NginX 将去指定的证书中查找 OCSP 服务的地址，</span><br><span class="line">获得响应内容后通过证书链下发给客户端。</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_verify on;# 启用OCSP响应验证，OCSP信息响应适用的证书</span><br><span class="line">    ssl_trusted_certificate /path/to/xxx.pem;#若 ssl_certificate 指令指定了完整的证书链，则 ssl_trusted_certificate 可省略。</span><br><span class="line">    resolver 8.8.8.8 8.8.4.4 216.146.35.35 216.146.36.36 valid=60s;#添加resolver解析OSCP响应服务器的主机名，valid表示缓存。</span><br><span class="line">    resolver_timeout 2s；# resolver_timeout表示网络超时时间</span><br></pre></td></tr></table></figure>
<h5 id="人工更新"><a href="#人工更新" class="headerlink" title="人工更新"></a>人工更新</h5>为了缓存的更新时间更可加控，你也可以人工负责更新文件内容。利用 NginX 的 <a href="http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_stapling" target="_blank" rel="noopener"><code>ssl_stapling_file</code> 指令</a>直接将 OCSP 响应存成文件，NginX 从文件获取OCSP响应而无需从服务商拉取，将其随证书下发而不实时查询。<figure class="highlight"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name  xx.xx.com;</span><br><span class="line">    index index.html index.htm index.jsp;</span><br><span class="line"></span><br><span class="line">    ssl_certificate         server.pem;#证书的.cer文件路径</span><br><span class="line">    ssl_certificate_key     server-key.pem;#证书的.key文件</span><br><span class="line"></span><br><span class="line">    # 开启 OCSP Stapling ---当客户端访问时 NginX 将去指定的证书中查找 OCSP 服务的地址，</span><br><span class="line">获得响应内容后通过证书链下发给客户端。</span><br><span class="line">    ssl_stapling on;</span><br><span class="line">    ssl_stapling_file /xxx/xxx/stapling_file.ocsp; </span><br><span class="line">    ssl_stapling_verify on;# 启用OCSP响应验证，OCSP信息响应适用的证书</span><br><span class="line">    ssl_trusted_certificate /path/to/xxx.pem;#若 ssl_certificate 指令指定了完整的证书链，则 ssl_trusted_certificate 可省略。</span><br></pre></td></tr></table></figure>
<a href="https://quchao.com/entry/how-to-configure-ocsp-stapling-on-nginx-for-the-certificates-issued-by-lets-encrypt/" target="_blank" rel="noopener">参考博客-配置</a><br><a href="https://blog.csdn.net/supertor/article/details/84861500" target="_blank" rel="noopener">参考博客-https优化</a></li>
</ul>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx能为前端带来什么(分享)</title>
    <url>/2020/03/03/Nginx%E8%83%BD%E4%B8%BA%E5%89%8D%E7%AB%AF%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88-%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h3 id="一、利用Nginx和Host把自定义域名指向本地"><a href="#一、利用Nginx和Host把自定义域名指向本地" class="headerlink" title="一、利用Nginx和Host把自定义域名指向本地"></a>一、利用Nginx和Host把自定义域名指向本地</h3><hr>
<p>移动互联网发展到今天，我们的前端开发工作内容已不仅仅局限于pc浏览器端的网页，现在很多应用都已经引入了新的开发模式：Hybrid APP 或者 H5页面开发</p>
<p>本地切页面mock数据开发阶段实时调试方法很简单:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 先确保你的手机和电脑连在同一个局域网内. </span><br><span class="line">2. 打开terminal, 然后输入 ipconfig,然后获取ip地址 192.168.XX.XX </span><br><span class="line">3. 手机浏览器里输入这个地址: http:&#x2F;&#x2F;192.168.XX.XX:8080就可以访问到了</span><br></pre></td></tr></table></figure>

<p>但是我们考虑一下以下场景<br>在测试环境联调接口的时候，虽说是和后端商量好了接口定义和返回数据，在上测试环境之前，本地开发的时候可以访问测试环境的数据就好了，方便我们自测<br>在线上环境如果出现bug，我们没有客户端的真实环境，比如测试环境没有正式环境的某些数据，很难将问题复现出来，也不可能拿线上代码直接去push调试，所以这种方案显然不合理。那么有什么办法能让我们修改完本地代码后，直接重载客户端的Webview，就能实时看到Native中最新效果了呢。</p>
<p><strong>1.如何本地调取线上环境接口数据，没数据我们无法测试</strong></p>
<p>下面我们就用nginx和host 把自定义域名指向本地<br><a href="https://www.jianshu.com/p/fc1e81efc867" target="_blank" rel="noopener">mac 安装nginx 并用Nginx和Host把自定义域名指向本地实现Https访问</a><br><a href="https://www.jianshu.com/p/71095e5ca9b3" target="_blank" rel="noopener">mac openssl生成你需要的域名的证书并且设置信任证书</a></p>
<p><strong>2.如何将本地代码实时同步到客户端内访问。</strong><br>这个时候需要charles<br><a href="https://www.jianshu.com/p/d30339e0f5ae" target="_blank" rel="noopener">移动端Charles抓取https包</a><br>首先需要手机连接到与当前电脑同一个wifi局域网，对该wifi网络进行高级设置-代理：<br>代理服务器主机名：使用PC的本机IP地址<br>代理服务器端口：使用Charles设置的Port值，默认是8888<br>如果不能访问开发页面可以参照移动端Charles抓取https包最后说的证书的问题</p>
<p>npm包里面<a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">http-proxy-middleware</a>也是可以实现的</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Search Engine Optimization</title>
    <url>/2019/12/19/Search-Engine-Optimization/</url>
    <content><![CDATA[<blockquote>
<p>解决SEO(Search Engine Optimization),首屏问题 , 页面较少，且预渲染相对于SSR比较简单，预渲染可以极大的提高网页访问速度。而且配合一些meat插件，完全可以满足SEO需求。<br>Prerender服务需要有NodeJs环境支持，如果之前服务器环境没有NodeJs需要先进行安装。</p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install --save prerender-spa-plugin</span><br></pre></td></tr></table></figure>
<p>prerender-spa-plugin中有puppeteer<br>可能会报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ERROR: Failed to download Chromium r515411! <span class="built_in">Set</span> <span class="string">"PUPPETEER_SKIP_CHROMIUM_DOWNLOA</span></span><br><span class="line"><span class="string">D"</span> env variable to skip download.</span><br></pre></td></tr></table></figure>
<p>此时可以试试淘宝镜像安装</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cnpm install --save prerender-spa-plugin</span><br></pre></td></tr></table></figure>
<p>因为在执行安装的过程中需要执行install.js，这里会下载Chromium,官网建议是进行跳过，我们可以执行 —ignore-scripts 忽略这个js执行。也可以通过设置环境变量set PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1阻止下载 Chromium （因为封网，直接下载会失败） </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm i --save puppeteer --ignore-scripts</span><br></pre></td></tr></table></figure>
<p>然后手动下载Chromium<br>解压到你当前项目中的node_modules/puppeteer/.local-chromium/mac-571375下就可以了</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><hr>
<p>webpack.base.conf.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">  <span class="comment">//entry: &#123;app: './src/main.js'&#125;</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">'babel-polyfill'</span>,<span class="string">'./src/main.js'</span>]<span class="comment">//babel-polyfill会仿效一个完整的 ES2015+ 环境，并意图运行于一个应用中而不是一个库/工具。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack.prod.conf.js<br>开始我这样写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PrerenderSpaPlugin = <span class="built_in">require</span>(<span class="string">'prerender-spa-plugin'</span>)</span><br><span class="line">    <span class="keyword">new</span> PrerenderSpaPlugin(&#123;</span><br><span class="line">        <span class="comment">// 生成文件的路径，也可以与webpakc打包的一致。</span></span><br><span class="line">        <span class="comment">// 这个目录只能有一级，如果目录层次大于一级，在生成的时候不会有任何错误提示，在预渲染的时候只会卡着不动。</span></span><br><span class="line">         staticDir: path.join(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">        <span class="comment">// List of routes to prerender</span></span><br><span class="line">        <span class="comment">// 对应自己的路由文件，比如index有参数，就需要写成 /index/param1。</span></span><br><span class="line">        routes: [ <span class="string">'/'</span>, <span class="string">'/team'</span>, <span class="string">'/analyst'</span>,<span class="string">'/voter'</span>,<span class="string">'/sponsor'</span>],</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这个很重要，如果没有配置这段，也不会进行预编译</span></span><br><span class="line">        renderer: <span class="keyword">new</span> Renderer(&#123;</span><br><span class="line">        renderAfterTime: <span class="number">5000</span>,</span><br><span class="line">       <span class="comment">// eg, with `document.dispatchEvent(new Event('render-event'))`</span></span><br><span class="line">       <span class="comment">// 在 main.js 中 document.dispatchEvent(new Event('render-event'))，两者的事件名称要对应上。</span></span><br><span class="line">     renderAfterDocumentEvent: <span class="string">'render-event'</span>,<span class="comment">//这句话会报错building for production...[prerender-spa-plugin] Unable to prerender all routes!</span></span><br><span class="line">UnhandledPromiseRejectionWarning: <span class="built_in">Error</span>: waiting <span class="keyword">for</span> selector <span class="string">"render-event"</span> failed: timeout <span class="number">30000</span>ms exceeded</span><br><span class="line">   </span><br><span class="line">          <span class="comment">// Optional - Wait to render until the specified element is detected using `document.querySelector`</span></span><br><span class="line">          <span class="comment">// renderAfterElementExists: 'render-event',</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure>
<p>结果报错 ：building for production…[prerender-spa-plugin] Unable to prerender all routes! UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Navigation Timeout Exceeded: 30000ms exceededrender AfterTime: 5000<br>偶然看到一个解决的办法 <a href="http://github.com/chrisvfritz/prerender-spa-plugin/issues/196" target="_blank" rel="noopener">UnhandledPromiseRejectionWarning</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PrerenderSpaPlugin = <span class="built_in">require</span>(<span class="string">'prerender-spa-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> Renderer = PrerenderSpaPlugin.PuppeteerRenderer</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> PrerenderSPAPlugin(&#123;</span><br><span class="line">  staticDir: path.join(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">  routes: [<span class="string">'/home/homePage'</span>],</span><br><span class="line">  renderer: <span class="keyword">new</span> PrerenderSPAPlugin.PuppeteerRenderer(&#123;<span class="comment">//这样写renderAfterTime生效了</span></span><br><span class="line">    renderAfterTime: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>开发目录main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  i18n,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  <span class="comment">/* 这句非常重要，否则预渲染将不会启动 */</span></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">document</span>.dispatchEvent(<span class="keyword">new</span> Event(<span class="string">'render-event'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>就可以在dist文件夹下生成对应路由的文件夹里面包含页面预渲染信息的html</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比如PrerenderSPAPlugin中的 routes: [ '/','/home/homePage']</span></span><br><span class="line">就会生成下面这样的路径</span><br><span class="line"> <span class="string">``</span><span class="string">` bash</span></span><br><span class="line"><span class="string">dist</span></span><br><span class="line"><span class="string">│    ├── home          </span></span><br><span class="line"><span class="string">│    │       └── index.html           </span></span><br><span class="line"><span class="string">│    ├── homePage</span></span><br><span class="line"><span class="string">│             └── index.html </span></span><br><span class="line"><span class="string">├── index.html      </span></span><br><span class="line"><span class="string">└── static</span></span><br></pre></td></tr></table></figure>
<p>结合管理头部标签插件vue-meta-info<br>main.js中加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MetaInfo <span class="keyword">from</span> <span class="string">'vue-meta-info'</span></span><br><span class="line">Vue.use(MetaInfo)</span><br></pre></td></tr></table></figure>
<p>页面的vue中加metaInfo信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  metaInfo: &#123;</span><br><span class="line">    title: <span class="string">'We Inc'</span>,</span><br><span class="line">    meta: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'keywords'</span>,</span><br><span class="line">        content: <span class="string">'关键字1,关键字2,关键字3'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'description'</span>,</span><br><span class="line">        content: <span class="string">'这是一段网页的描述'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就可以将关键字预渲染到html的页面中去</p>
<h2 id="渲染结束遇到的问题"><a href="#渲染结束遇到的问题" class="headerlink" title="渲染结束遇到的问题"></a>渲染结束遇到的问题</h2><hr>
<p>一、Uncaught ReferenceError: webpackJsonp is not defined<br>发现是config/index.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">assetsPublicPath: <span class="string">'/'</span>, <span class="comment">//路径是/不是./</span></span><br></pre></td></tr></table></figure>
<p>这里要强调一点如果你的assetsPublicPath设置成’<a href="http://www.xxx.com&#39;，生成的html是没有内容的而且插件vue-meta-info的设置的信息也不会加载出来" target="_blank" rel="noopener">www.xxx.com&#39;，生成的html是没有内容的而且插件vue-meta-info的设置的信息也不会加载出来</a><br><img src="http://upload-images.jianshu.io/upload_images/2790249-04d6d8fd7114f27d.png" alt="生成html图片.png"><br> 如果是/找到js文件的话，生成这种带你写的结构的html<br><img src="http://upload-images.jianshu.io/upload_images/2790249-9f705064666bb4f1.png" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2790249-f5c1a3a4975bae5f.png" alt="image.png"></p>
<p>二、解决vuex requires a Promise polyfill in this browser问题<br>添加babel-polyfill插件<br>webpack.base.conf.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">  <span class="comment">//entry: &#123;app: './src/main.js'&#125;</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">'babel-polyfill'</span>,<span class="string">'./src/main.js'</span>]<span class="comment">//babel-polyfill会仿效一个完整的 ES2015+ 环境，并意图运行于一个应用中而不是一个库/工具。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>PreRender预渲染</category>
      </categories>
      <tags>
        <tag>Search Engine</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>git常见命令</title>
    <url>/2020/06/26/git%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>1、设置户名和email</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[$ git config --global user.name gitaccount](http:<span class="comment">//lib.csdn.net/base/git)</span></span><br><span class="line"></span><br><span class="line">$ git config --global user.email gitaccount@example.com</span><br></pre></td></tr></table></figure>
<p>2、查看用户名和email</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ git config user.name/email。</span><br></pre></td></tr></table></figure>
<p>3、取消全局配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ git config --global --unset user.name</span><br><span class="line"></span><br><span class="line">$ git config --global --unset user.email</span><br></pre></td></tr></table></figure>

<p>4、#全局配置账户已经移除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name</span><br></pre></td></tr></table></figure>
<p>5、#全局配置邮箱已经移除</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> git config --global user.email</span><br></pre></td></tr></table></figure>
<p>6、移除远程的库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure>
<p>7、添加现在库的地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remove add origin</span><br></pre></td></tr></table></figure>
<p>8、git拉取新的远程分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure>
<p>9、git 拉取远程分支，远程分支不存在自动删除本地分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure>
<p>10、git 切换分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git checkout 分支名字</span><br></pre></td></tr></table></figure>
<p>git创建并切换分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure>
<p>git创建分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure>
<p>11、如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p>12、如果不小心commit了一个不需要commit的文件，可以对其进行撤销。</p>
<p>先使用git log 查看 commit日志</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git reset —hard commit_id</span><br><span class="line"></span><br><span class="line">git push origin HEAD —force</span><br></pre></td></tr></table></figure>
<p>13、git 列出本地分支和远程分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<p>14、git 查看远程分支(这个删除远程分支有时候并不能删掉)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
<p>15、git删除本地分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git branch -D xxxxx</span><br></pre></td></tr></table></figure>
<p>16、git删除远程分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git branch -r -d origin/branch-name</span><br></pre></td></tr></table></figure>
<p>17、git 删除远程分支</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git push origin --<span class="keyword">delete</span> <span class="keyword">new</span></span><br></pre></td></tr></table></figure>
<p>18、git 重命名分支，如果newbranch名字分支已经存在，则需要使用-M强制重命名，否则，使用-m进行重命名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git branch -m | -M oldbranch newbranch</span><br></pre></td></tr></table></figure>
<p>19、把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:michaelliao/learngit.git</span><br></pre></td></tr></table></figure>
<p>一个目录的git初始化 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>取消一个目录的git初始化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">rm -rf .git</span><br></pre></td></tr></table></figure>
<p>git 克隆线上的库并重新命名<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p>
<p>git 将某个文件恢复<br>当你git status 看到某个文件修改了之后，你想撤回修改，可以执行以下命令就可以了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git checkout 文件名</span><br></pre></td></tr></table></figure>

<p>git 合并分支<br>fast-forward方式就是当条件允许的时候，git直接把HEAD指针指向合并分支的头，完成合并。属于“快进方式”，不过这种情况如果删除分支，则会丢失分支信息。因为在这个过程中没有创建commit<br>要加–no-ff：不使用fast-forward方式合并，保留分支的commit历史<br>–squash：使用squash方式合并，把多次分支commit历史压缩为一次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git merge master --no-ff</span><br></pre></td></tr></table></figure>
<p>git 查看远端仓库的地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>
<p>git 修改远程仓库地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">set</span>-url origin [url]</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>
<p>提交到远程报错fatal: refusing to merge unrelated histories<br>git pull origin master –allow-unrelated-histories</p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone https 和 SSH 的区别</title>
    <url>/2020/06/26/git%20clone%20https%20%E5%92%8C%20SSH%20%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<hr>
<p>1、https可以随意克隆github上的项目，而不管是谁的；SSH你必须是你要克隆的项目的拥有者或管理员，且需要先添加 SSH key ，否则无法克隆。</p>
<p>2、https url 在push的时候是需要验证用户名和密码的；而 SSH 在push的时候，是不需要输入用户名的，如果配置SSH key的时候设置了密码，则需要输入密码的，否则直接是不需要输入密码的。</p>
<p>20、查看当前分支是从哪个分支拉取的 git log –oneline –graph –decorate</p>
<p>git 配置ssh</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ cd ~<span class="regexp">/.ssh (or  cd $HOME/</span>.ssh) </span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure>

<p>检查 id_rsa.pub等是否存在存在就通过</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ clip &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub(如果报错clip: command not found的话可以用pbcopy &lt; ~<span class="regexp">/.ssh/i</span>d_rsa.pub)</span><br><span class="line">或者</span><br><span class="line">cat ~<span class="regexp">/.ssh/i</span>d_rsa.pub| pbcopy</span><br></pre></td></tr></table></figure>

<ul>
<li><p>拷贝id_rsa.pub</p>
</li>
<li><p>否则创建ssh key</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C<span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure>
<p>输入文件以及密码可以为空</p>
</li>
</ul>
<p>你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了</p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git遇到的错误</title>
    <url>/2020/06/26/git%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h3 id="1、Could-not-open-file-git-rebase-merge-done-for-reading-No-such-file-or-directory"><a href="#1、Could-not-open-file-git-rebase-merge-done-for-reading-No-such-file-or-directory" class="headerlink" title="1、Could not open file .git/rebase-merge/done for reading: No such file or directory"></a>1、Could not open file .git/rebase-merge/done for reading: No such file or directory</h3><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git rebase --skip与--abort的区别是什么</span><br><span class="line">git rebase --abort 是无风险的操作，会回到rebase操作之前的状态，<span class="number">2</span>个分支的commits毫发无损。</span><br><span class="line">git rebase --skip 是高风险的操作，引起冲突的commits会被丢弃（这部分代码修改会丢失）。</span><br><span class="line">git rebase --<span class="keyword">continue</span> 用于修复冲突，提示开发者，一步一步地有没有解决冲突，fix conflicts and then run <span class="string">"git rebase --continue"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML2canvas截图 解决 canvas 将图片转为base64报错 Uncaught DOMException Failed to execute &#39;toDataURL&#39; on &#39;HTMLCanvasElement&#39; Tainted canvases may not be exported</title>
    <url>/2019/12/31/html2canvas%E6%88%AA%E5%9B%BE%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<blockquote>
<p>最近在做一个分享生成海报的功能，用户进到页面，开始根据用户信息展示html网页，然后用html2canvas生成图片，用户长按图片保存到本地的功能 </p>
</blockquote>
<p>1、html2canvas <a href="http://html2canvas.hertzen.com/" target="_blank" rel="noopener">官网</a><br><code>html2canvas</code>的详细介绍可以点击<a href="https://html2canvas.hertzen.com/documentation" target="_blank" rel="noopener">这里</a>查看,其实简单来说就是通过<code>canvas</code>将<code>HTML</code>生成的<code>DOM</code>节点绘制到画布上,再可以通过自己的需求转换成图片.所以官方文档也说了,最后生成的效果不是100%相同的,这一点大家要有心理准备,无论怎样,一点点小瑕疵是肯定有的。</p>
<p>2、Code to Image  <a href="https://github.com/akira-cn/code-to-image" target="_blank" rel="noopener">github地址</a></p>
<p>3、dom-to-image   <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Drawing_DOM_objects_into_a_canvas" target="_blank" rel="noopener">官网</a></p>
<h3 id="html2canvas"><a href="#html2canvas" class="headerlink" title="html2canvas"></a>html2canvas</h3><p>html代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">""</span>  crossorigin=<span class="string">"Anonymous"</span>&gt;&lt;<span class="regexp">/img&gt;</span></span><br></pre></td></tr></table></figure>
<p>js代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">".main-picture"</span>)  中 main-<span class="function"><span class="params">picture</span>=&gt;</span>是你要截图的最外层的选择器</span><br><span class="line"></span><br><span class="line">html2canvas(<span class="built_in">document</span>.querySelector(<span class="string">".main-picture"</span>),&#123;</span><br><span class="line"></span><br><span class="line">useCORS:<span class="literal">true</span>,<span class="comment">//设置可以素材可以跨域，移动端不兼容</span></span><br><span class="line"></span><br><span class="line">allowTaint: <span class="literal">false</span>,<span class="comment">//默认就是false，允许跨域</span></span><br><span class="line"></span><br><span class="line">taintTest: <span class="literal">true</span>,<span class="comment">//默认就是false，是否在渲染前测试图片</span></span><br><span class="line"></span><br><span class="line">scale:<span class="built_in">window</span>.devicePixelRatio,<span class="comment">//解决清晰度的问题可以改变scale的值</span></span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">canvas</span> =&gt;</span> &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dataUrl = canvas.toDataURL();</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line"></span><br><span class="line">newImg.src =  dataUrl;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(newImg);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>但是发现一个问题，就是背景图片，或者说所有的图片都没有被截图截上，原因：</p>
<p>2、<code>关于图片需要截图，所有的元素需要动态创建元素document.createElement(&#39;img&#39;)
这样图片就可以截图截出来了</code>关于这一点，我可能被误导了，因为html2canvas里面有这段动态创建的代码，为什么我当时跨域也设置了但是没有截到加入的图片是因为，图片是一个静态资源，我通过nginx或者node服务器将资源指向本地方便测试，因为资源指向本地，而本地的nginx以及node配置的服务器上面没有配置header头加的access-control-allow-origion：*，所以产生了误解要动态创建</p>
<h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p><strong>跨域问题</strong><br>就是背景图片，或者说所有的图片都没有被截图截上，原因：</p>
<p>如果页面上有跨域的图片需要做处理,同事html2canvas需要传允许跨域的字段，后端也要加允许跨域才可以<br><img src="https://upload-images.jianshu.io/upload_images/2790249-4b81b4068599b204.jpeg" alt="WechatIMG11.jpeg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     html2canvas(this.imgRef.current, &#123;</span><br><span class="line">       useCORS: true &#x2F;&#x2F; 开启跨域设置，需要后台设置cors</span><br><span class="line">     &#125;).then((canvas) &#x3D;&gt; &#123;</span><br><span class="line">       &#x2F;&#x2F; toDataURL函数生成img标签的可用数据  图片格式转成 base64</span><br><span class="line">       let dataURL &#x3D; canvas.toDataURL(&quot;image&#x2F;png&quot;)</span><br><span class="line">       console.log(dataURL)</span><br><span class="line">     &#125;)</span><br><span class="line">&lt;img  crossOrigin&#x3D;&#39;anonymous&#39;</span><br><span class="line">           src&#x3D;&quot;https:&#x2F;&#x2F;xxx.com&#x2F;a.jpeg&quot; className&#x3D;&quot;w100&quot; alt&#x3D;&quot;&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>这是为什么呢？<br>因为<code>canvas</code>将<code>HTML</code>生成的<code>DOM</code>节点绘制到画布上，然后用canvas.toDataURL导出图片，如果是读图片内容，是有浏览器同源限制，toDataURL是读取图片</p>
<p>2、返回图片是base64即可</p>
<h4 id="接下来纯canvas绘制遇到的问题"><a href="#接下来纯canvas绘制遇到的问题" class="headerlink" title="接下来纯canvas绘制遇到的问题"></a>接下来纯canvas绘制遇到的问题</h4><p>用html2canvas转base64 ，但是在图片转base64的过程中遇到了两个问题</p>
<ul>
<li>1、图片无法绘制，转成的base64 用浏览器打开是空的透明画布，如图</li>
</ul>
<p><img src="//upload-images.jianshu.io/upload_images/6359034-33eb49815f4e1cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/472/format/webp" alt="image"></p>
<p>代码片段如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var canvas&#x3D;document.getElementById(&quot;canvas&quot;),&#x2F;&#x2F;获取canvas</span><br><span class="line">    ctx &#x3D; canvas.getContext(&quot;2d&quot;), &#x2F;&#x2F;对应的CanvasRenderingContext2D对象(画笔)</span><br><span class="line">    img &#x3D; new Image(),&#x2F;&#x2F;创建新的图片对象</span><br><span class="line">    base64 &#x3D; &#39;&#39; ;&#x2F;&#x2F;base64 </span><br><span class="line"></span><br><span class="line">img.src &#x3D; &#39;http:&#x2F;&#x2F;www.xxxx.png&#39;;</span><br><span class="line">ctx.drawImage(img,0,0);</span><br><span class="line">base64 &#x3D; canvas.toDataURL(&quot;image&#x2F;png&quot;);</span><br></pre></td></tr></table></figure>

<p>这个时候我想到问题应该是 <strong>图片还没加载完毕</strong> 就已经绘制了，既然是这样，那么修改为以下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var canvas&#x3D;document.getElementById(&quot;canvas&quot;),&#x2F;&#x2F;获取canvas</span><br><span class="line">    ctx &#x3D; canvas.getContext(&quot;2d&quot;), &#x2F;&#x2F;对应的CanvasRenderingContext2D对象(画笔)</span><br><span class="line">    img &#x3D; new Image(),&#x2F;&#x2F;创建新的图片对象</span><br><span class="line">    base64 &#x3D; &#39;&#39; ;&#x2F;&#x2F;base64 </span><br><span class="line">img.src &#x3D; &#39;http:&#x2F;&#x2F;www.xxxx.png&#39;;</span><br><span class="line">img.onload &#x3D; function()&#123;&#x2F;&#x2F;图片加载完，再draw 和 toDataURL</span><br><span class="line">     ctx.drawImage(img,0,0);    </span><br><span class="line">     base64 &#x3D; canvas.toDataURL(&quot;image&#x2F;png&quot;); </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>

<p>修改完毕我正要打算喝杯水庆祝一下，一刷新页面，一口老血喷了出来，chrome控制台又报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uncaught DOMException: Failed to execute &#39;toDataURL&#39; on &#39;HTMLCanvasElement&#39;: Tainted canvases may not be exported.</span><br></pre></td></tr></table></figure>

<p>大概意思是<strong>canvas无法执行toDataURL方法：污染的画布无法输出</strong>，请原谅我的灵魂翻译。<br>经google 发现原来是受限于 CORS 策略，会存在跨域问题，虽然可以使用图像（比如append到页面上）但是绘制到画布上会污染画布，一旦一个画布被污染,就无法提取画布的数据，比如无法使用使用画布toBlob(),toDataURL(),或getImageData()方法;当使用这些方法的时候 会抛出一个安全错误，读图片内容，是有同源限制，canvas的drawimage应该是绘制，toBlob(),toDataURL(),或getImageData()读取图片内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uncaught DOMException: Failed to execute &#39;toDataURL&#39; on &#39;HTMLCanvasElement&#39;: Tainted canvases may not be exported.</span><br></pre></td></tr></table></figure>

<p>具体详情附上一个链接非常详细如下：<a href="https://link.jianshu.com?t=https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image</a>，非常值得一看，个人理解可能不到到位，还是建议读读这个链接。</p>
<p><strong>解决方案：</strong></p>
<blockquote>
<p>图片设置 ：crossOrigin属性<br>代码片段：img.setAttribute(“crossOrigin”,’Anonymous’)</p>
</blockquote>
<p><strong>完整代码:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;</span><br><span class="line">  var canvas&#x3D;document.getElementById(&quot;canvas&quot;),&#x2F;&#x2F;获取canvas</span><br><span class="line">      ctx &#x3D; canvas.getContext(&quot;2d&quot;), &#x2F;&#x2F;对应的CanvasRenderingContext2D对象(画笔)</span><br><span class="line">      img &#x3D; new Image(),&#x2F;&#x2F;创建新的图片对象</span><br><span class="line">      base64 &#x3D; &#39;&#39; ;&#x2F;&#x2F;base64 </span><br><span class="line">  img.src &#x3D; &#39;http:&#x2F;&#x2F;www.xxxx.png&#39;;</span><br><span class="line">  img.setAttribute(&quot;crossOrigin&quot;,&#39;Anonymous&#39;)</span><br><span class="line">  img.onload &#x3D; function()&#123;&#x2F;&#x2F;图片加载完，再draw 和 toDataURL</span><br><span class="line">       ctx.drawImage(img,0,0);    </span><br><span class="line">       base64 &#x3D; canvas.toDataURL(&quot;image&#x2F;png&quot;); </span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>

<p><strong>stackoverflow上解决方案：</strong><br>地址：<a href="https://link.jianshu.com?t=https://stackoverflow.com/questions/20424279/canvas-todataurl-securityerror" target="_blank" rel="noopener">https://stackoverflow.com/questions/20424279/canvas-todataurl-securityerror</a></p>
<p><strong>Tips</strong>:如果遇到其他canvas 关于SecurityError 的问题，也可以尝试一下这个解决方法。<br>另外经过多次搜索，总结了几个小窍门</p>
<blockquote>
<p>1:使用google 。baidu搜索的都是转来转去的几篇文章，干扰太大。<br>2:首先搜索bug之家 ：stackoverflow，总有解决你的bug的方案，链接：<a href="https://link.jianshu.com?t=https://stackoverflow.com/" target="_blank" rel="noopener">https://stackoverflow.com/</a><br>3:web文档之家：mozilla的web文档 ，非常权威，非常详尽。链接：<a href="https://link.jianshu.com?t=https://developer.mozilla.org/en-US/" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/</a></p>
</blockquote>
<h3 id="html2canvas在微信浏览器中遇到的问题"><a href="#html2canvas在微信浏览器中遇到的问题" class="headerlink" title="html2canvas在微信浏览器中遇到的问题"></a>html2canvas在微信浏览器中遇到的问题</h3><h5 id="微信浏览器中截不了图不会走then函数中"><a href="#微信浏览器中截不了图不会走then函数中" class="headerlink" title="微信浏览器中截不了图不会走then函数中"></a>微信浏览器中截不了图不会走then函数中</h5><p>在真机ios的微信浏览器中截图会有问题，截不了图，这个时候将html2canvas版本回滚到1.0.0-rc.4即可，如果不行，记得清除微信的缓存再试试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">“html2canvas”: “1.0.0-rc.4”</span><br></pre></td></tr></table></figure>
<h5 id="html2canvas截图不全的问题"><a href="#html2canvas截图不全的问题" class="headerlink" title="html2canvas截图不全的问题"></a>html2canvas截图不全的问题</h5><p><img src="https://upload-images.jianshu.io/upload_images/2790249-17734d2bc28dd805.png" alt="image.png"><br><strong>原因：</strong><br>我所知道的原因有两点，</p>
<p><strong>第一点</strong>：在点击保存图片时，此时要保存的资源较多，造成模块并没有完全加载完毕，就已经生成了截图；<br>解决方案：(加上一个延时操作)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 利用 html2canvas 下载 canvas</span><br><span class="line">      setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        html2canvas(img, &#123; canvas: canvas &#125;).then(function(canvas) &#123;</span><br><span class="line">          _this.photoUrl &#x3D; canvas.toDataURL();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, 500);</span><br></pre></td></tr></table></figure>
<p><strong>第二点</strong>：滚轮滑动造成的，主要是html2canvas是根据body进行截图，若内容高度高于body时，就会出现这样的问题(大概意思就是有滚动条时造成的)<br>解决方案：body内加一层div设置高度是100vh超出滚动，这样就不会高于body了</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>HTML2canvas-screenshot</category>
      </categories>
      <tags>
        <tag>canvas</tag>
        <tag>screenshot、浏览器同源</tag>
        <tag>Frontend前端</tag>
      </tags>
  </entry>
  <entry>
    <title>mac 安装nginx并配置SSL实现Https访问</title>
    <url>/2020/03/03/mac-%E5%AE%89%E8%A3%85nginx%E5%B9%B6%E9%85%8D%E7%BD%AESSL%E5%AE%9E%E7%8E%B0Https%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span></span><br><span class="line">brew install nginx 安装nginx</span><br><span class="line">nginx -v 显示版本号</span><br></pre></td></tr></table></figure>
<p>找到Nginx文件夹</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /usr/local/etc/nginx</span><br></pre></td></tr></table></figure>
<p>启动nginx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo nginx </span><br><span class="line">or </span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>
<p>关闭nginx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo nginx -s stop</span><br></pre></td></tr></table></figure>
<p>重启nginx</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>
<p>检查nginx配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nginx -t nginx.conf</span><br><span class="line">or</span><br><span class="line">sudo nginx -t nginx.conf</span><br></pre></td></tr></table></figure>
<p>查日志</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /usr/local/<span class="keyword">var</span>/log/nginx</span><br><span class="line">tail -f access.log</span><br><span class="line">tail -f error.log</span><br></pre></td></tr></table></figure>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>1、找到Nginx文件夹</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cd /usr/local/etc/nginx</span><br></pre></td></tr></table></figure>
<p>2、openssl生成自签名证书</p>
<p>创建服务器私钥，命令会让你输入一个口令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out server.key <span class="number">1024</span></span><br></pre></td></tr></table></figure>
<p>根据私钥生成证书申请,创建签名请求的证书（CSR）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">openssl req -<span class="keyword">new</span> -key server.key -out server.csr</span><br></pre></td></tr></table></figure>
<p>下面的选项至少写一个，才可以生成证书成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Country Name (<span class="number">2</span> letter code) []:ch</span><br><span class="line">State or Province Name (full name) []:</span><br><span class="line">Locality Name (eg, city) []:</span><br><span class="line">Organization Name (eg, company) []:</span><br><span class="line">Organizational Unit Name (eg, section) []:</span><br><span class="line">Common Name (eg, fully qualified host name) []:</span><br><span class="line">Email Address []:</span><br></pre></td></tr></table></figure>

<p>在加载SSL支持的Nginx并使用上述私钥时除去必须的口令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ cp server.key server.key.org</span><br><span class="line"></span><br><span class="line">$ openssl rsa -<span class="keyword">in</span> server.key.org -out server.key</span><br></pre></td></tr></table></figure>

<p>最后标记证书使用上述私钥和CSR</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -<span class="keyword">in</span> server.csr -out server.crt -signkey server.key -days <span class="number">3650</span></span><br></pre></td></tr></table></figure>

<p>4、配置nginx：修改/usr/local/etc/nginx/nginx.conf 文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">root  html（当前静态文件的路径）;</span><br><span class="line"></span><br><span class="line">index  index.html index.htm;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>不过最好不要把配置写到/usr/local/etc/nginx/nginx.conf里面,而是写在当前目录下面的servers的文件夹下，创建不同的config更加清晰：<br>例如：servers下建立一个millet.conf<br>在millet.conf里面配置</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       <span class="number">443</span> ssl;</span><br><span class="line">        server_name  <span class="keyword">static</span>.millet.com;</span><br><span class="line">         #server.crt和server.key都在nginx下面</span><br><span class="line">        ssl_certificate      server.crt;</span><br><span class="line">        ssl_certificate_key  server.key;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   （当前静态文件的路径）;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>ihost</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="keyword">static</span>.millet.com</span><br></pre></td></tr></table></figure>
<h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo nginx</span><br><span class="line">或者</span><br><span class="line">sudo brew services start nginx</span><br></pre></td></tr></table></figure>

<h4 id="停止nginx"><a href="#停止nginx" class="headerlink" title="停止nginx"></a>停止nginx</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo nginx -s stop</span><br><span class="line">或者</span><br><span class="line">sudo brew services stop nginx</span><br></pre></td></tr></table></figure>

<h4 id="重新加载配置文件"><a href="#重新加载配置文件" class="headerlink" title="重新加载配置文件"></a>重新加载配置文件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo nginx -s reload</span><br><span class="line">或者</span><br><span class="line">sudo brew services restart nginx</span><br></pre></td></tr></table></figure>
<h4 id="安装常见问题："><a href="#安装常见问题：" class="headerlink" title="安装常见问题："></a>安装常见问题：</h4><p>安装Nginx输入命令brew install nginx报错</p>
<p>You have not agreed to the Xcode license. Please resolve this by running:</p>
<p>sudo xcodebuild -license</p>
<p>nginx设置本地跨域</p>
<p>在mac 终端运行命令的时候会被提示没有同意xcode 证书 ，这个时候需要在Terminal中同意license</p>
<p>此时 输入命令 sudo xcodebuild -license 空格到最后 输入agree 就可以了</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>moker-api</title>
    <url>/2019/12/31/moker-api/</url>
    <content><![CDATA[<p>mocker-api这里主要讲我在反向代理遇见的问题，其他的请看官方文档。<br>在我主要用来进行开发的公司的电脑上这样匹配接口就可以代理上，但是按照文档上的直接反向代理的写法却代理不成功</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'/:owner/:repo/raw/:ref/*'</span>: <span class="string">'http://127.0.0.1:2018'</span></span><br></pre></td></tr></table></figure>
<p>但是在我自己的电脑上接口竟然没匹配到!<br>开始我以为是新版本的webpack-dev-server的问题导致我本地服务起的有问题，虽然爆出了这个警告，但是我可以访问我的页面，只是mock反向代理不成功而已，直接mock假数据就可以成功<br><img src="http://upload-images.jianshu.io/upload_images/2790249-3542a5fc3e348ecd.png" alt="WeChat3ccbcd8e228a5aa0ae7d7538fb46be26.png"><br>最后发现按照文档上以正则匹配的形式去写才可以匹配上!</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'/:owner/:repo/raw/:ref/(.*)'</span>: <span class="string">'http://127.0.0.1:2018'</span></span><br></pre></td></tr></table></figure>


<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = &#123;</span><br><span class="line">  <span class="comment">// Priority processing.</span></span><br><span class="line">  <span class="comment">// apiMocker(app, path, option)</span></span><br><span class="line">  <span class="comment">// This is the option parameter setting for apiMocker</span></span><br><span class="line">  _proxy: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">'/repos/(.*)'</span>: <span class="string">'https://api.github.com/'</span>,</span><br><span class="line">      <span class="string">'/:owner/:repo/raw/:ref/(.*)'</span>: <span class="string">'http://127.0.0.1:2018'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    changeHost: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// modify the http-proxy options</span></span><br><span class="line">    httpProxy: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        ignorePath: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      listeners: &#123;</span><br><span class="line">        proxyReq: <span class="function"><span class="keyword">function</span> (<span class="params">proxyReq, req, res, options</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'proxyReq'</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,    </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = proxy;</span><br></pre></td></tr></table></figure>
<p>当我的node版本变为v10.6.0，发现我的代理需要/repos/(.<em>)变回为/repos/</em><br>mocker-api 的version为1.9.0我需要这样去匹配路由/repos/(.*)<br>mocker-api 的version不同版本是否为不同的匹配规则有待验证</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>team-norm团队规范</category>
        <category>mock-data-norm模拟数据规范</category>
      </categories>
      <tags>
        <tag>frontend</tag>
        <tag>moker-api</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx配置允许指定域名下所有二级域名跨域请求</title>
    <url>/2020/03/03/nginx%E9%85%8D%E7%BD%AE%E5%85%81%E8%AE%B8%E6%8C%87%E5%AE%9A%E5%9F%9F%E5%90%8D%E4%B8%8B%E6%89%80%E6%9C%89%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/a2dffad06a5a" target="_blank" rel="noopener">跨域资源共享 CORS</a><br>核心原理是根据请求域名匹配是否是某域名的二级域名判断是否添加允许跨越头。<br>比如你想设置amy.com和kk.com下的子域名都可以跨域方案<br>需要在请求不能设置*<br>可以用nginx用$http_origin这样配置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"> listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name  xxx.xxx.com;</span><br><span class="line">    index index.html index.htm index.jsp;</span><br><span class="line"></span><br><span class="line">    ssl_certificate         /server.pem;#证书的.cer文件路径</span><br><span class="line">    ssl_certificate_key     /server-key.pem;#证书的.key文件</span><br><span class="line">    <span class="keyword">set</span> $flag '0';</span><br><span class="line">    location / &#123;</span><br><span class="line">       <span class="keyword">if</span> ($http_origin ~* <span class="string">"(https?:\/\/.*\.amy\.com($|\/))"</span>) &#123;</span><br><span class="line">           <span class="keyword">set</span> $flag '1';</span><br><span class="line">        &#125;</span><br><span class="line">    if ($http_origin ~* "(https?:\/\/.*\.kk\.com($|\/))") &#123;</span><br><span class="line">           <span class="keyword">set</span> $flag '1';</span><br><span class="line">        &#125;</span><br><span class="line">    if ($flag = '1') &#123;</span><br><span class="line">            #add_header Access-Control-Allow-Origin "*";</span><br><span class="line">            add_header Access-Control-Allow-Origin <span class="string">"$http_origin"</span>;</span><br><span class="line">            ###带上用户认证信息</span><br><span class="line">            add_header Access-Control-Allow-Credentials  <span class="literal">true</span>;</span><br><span class="line">            ##允许的方法post,get</span><br><span class="line">            add_header Access-Control-Allow-Methods  <span class="string">"POST, GET, PUT, PATCH, DELETE"</span>;</span><br><span class="line">            add_header Access-Control-Allow-Headers <span class="string">"xxx-xx-xx"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">       proxy_pass http:<span class="comment">//all_domians_default_http_upstream;#转向tomcat处理</span></span><br><span class="line">       proxy_set_header Host $host;</span><br><span class="line">       proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">       proxy_set_header X-Forwarded-Scheme  $scheme;#将scheme协议头发送给tomcat</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>openssl生成证书并设置本地 Nginx 的 HTTPS（证书设置信任）</title>
    <url>/2020/03/03/openssl%E7%94%9F%E6%88%90%E8%AF%81%E4%B9%A6%E5%B9%B6%E8%AE%BE%E7%BD%AE%E6%9C%AC%E5%9C%B0-Nginx-%E7%9A%84-HTTPS%EF%BC%88%E8%AF%81%E4%B9%A6%E8%AE%BE%E7%BD%AE%E4%BF%A1%E4%BB%BB%EF%BC%89/</url>
    <content><![CDATA[<h3 id="创建密钥"><a href="#创建密钥" class="headerlink" title="创建密钥"></a>创建密钥</h3><p>首先，进入 nginx 配置目录，创建 openssl 配置文件 req.conf，其中的 CN, DNS.1, DNS.2 等需要替换为自己的域名：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">x509_extensions = v3_req</span><br><span class="line">prompt = no</span><br><span class="line">[req_distinguished_name]</span><br><span class="line">C = US</span><br><span class="line">ST = VA</span><br><span class="line">L = SomeCity</span><br><span class="line">O = MyCompany</span><br><span class="line">OU = MyDivision</span><br><span class="line">CN = www.company.com</span><br><span class="line">[v3_req]</span><br><span class="line">keyUsage = keyEncipherment, dataEncipherment</span><br><span class="line">extendedKeyUsage = serverAuth</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line">[alt_names]</span><br><span class="line">DNS<span class="number">.1</span> = www.company.net</span><br><span class="line">DNS<span class="number">.2</span> = company.com</span><br><span class="line">DNS<span class="number">.3</span> = company.net</span><br></pre></td></tr></table></figure>
<p>接着，执行如下命令，创建证书：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -nodes -days <span class="number">730</span> -newkey rsa:<span class="number">2048</span> -keyout cert.pem -out cert.pem -config req.conf -extensions <span class="string">'v3_req'</span></span><br></pre></td></tr></table></figure>
<h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen <span class="number">443</span> ssl;</span><br><span class="line">    server_name www.example.com;</span><br><span class="line">    ssl_certificate cert.pem;</span><br><span class="line">    ssl_certificate_key cert.pem;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /Users/example/hello/world;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>服务器证书（ssl_certificate）是一个公开文件，每个请求连接的客户端都会收到一份。私有密钥（ssl_certificate_key）是加密单元，需要存储在保密的地方，但要确保 nginx 主线程可访问。私有密钥一般和证书存储到同一位置。</p>
<p>cert.pem 就是上一个步骤产生的证书和密钥，在一个文件中。</p>
<h3 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h3><p>打开 Chrome 的开发者工具下的【security】选项卡，查看当前的证书，然后下载下来，双击添加到操作系统中，修改为始终信任就可以了。</p>
<p>如果还继续显示是不安全，像下图这样<br><img src="http://upload-images.jianshu.io/upload_images/2790249-bf55b94311309b02.png" alt="image.png"></p>
<p>可以参照以下解决办法<br>Open developer tools<br>Goto the Application tab<br>Clear storage<br>Close and re-open tab</p>
<p>详细问题参照 <a href="https://stackoverflow.com/questions/44145936/chrome-active-content-with-certificate-errors" target="_blank" rel="noopener">“Active content with certificate errors”</a></p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh、oh-my-zsh以及oh-my-zsh插件</title>
    <url>/2020/06/26/zsh%E3%80%81oh-my-zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="什么是Zsh"><a href="#什么是Zsh" class="headerlink" title="什么是Zsh"></a>什么是Zsh</h1><blockquote>
<p>Zsh是一款强大的虚拟终端，既是一个系统的虚拟终端，也可以作为一个脚本语言的交互解析器。</p>
</blockquote>
<p>Zsh的一些特性:</p>
<ul>
<li>兼容bash</li>
<li>各种补全</li>
<li>历史纪录功能</li>
<li>多个终端会话共享历史记录<h1 id="什么是Oh-My-Zsh"><a href="#什么是Oh-My-Zsh" class="headerlink" title="什么是Oh My Zsh"></a>什么是Oh My Zsh</h1><blockquote>
<p>Oh My Zsh是一款社区驱动的命令行工具，正如它的主页上说的，Oh My Zsh 是一种生活方式。它基于zsh命令行，提供了主题配置，插件机制，已经内置的便捷操作。给我们一种全新的方式使用命令行。</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></span><br></pre></td></tr></table></figure>
<h3 id="查看oh-my-zsh插件"><a href="#查看oh-my-zsh插件" class="headerlink" title="查看oh-my-zsh插件"></a>查看oh-my-zsh插件</h3>安装好 zsh 和 oh-my-zsh 后，Oh My Zsh目录结构进入~/.oh-my-zsh目录后，看看该目录的结构<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ ls ~<span class="regexp">/.oh-my-zsh</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>lib 提供了核心功能的脚本库<br>tools 提供安装、升级等功能的快捷工具<br>plugins 自带插件的存在放位置<br>templates 自带模板的存在放位置<br>themes 自带主题文件的存在放位置<br>custom 个性化配置目录，自安装的插件和主题可放这里</p>
</blockquote>
</li>
</ul>
<p>可以进入~/.oh-my-zsh的文件夹下的plungins查看oh-my-zsh的所有的插件</p>
<h3 id="vim添加oh-my-zsh插件"><a href="#vim添加oh-my-zsh插件" class="headerlink" title="vim添加oh-my-zsh插件"></a>vim添加oh-my-zsh插件</h3><p>vim 打开命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vim .zshrc</span><br></pre></td></tr></table></figure>
<p>找到plugins =（）<br>添加插件即可<br>例如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> plugins=(</span><br><span class="line">  git</span><br><span class="line">  history-substring-search</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tools</category>
        <category>zsh、oh-my-zsh、oh-my-zsh插件、iTerm2</category>
      </categories>
      <tags>
        <tag>zsh、oh-my-zsh、oh-my-zsh插件、iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>zsh切换bash bash切换zsh</title>
    <url>/2020/06/26/zsh%E5%88%87%E6%8D%A2bash%20bash%E5%88%87%E6%8D%A2zsh/</url>
    <content><![CDATA[<blockquote>
<p>iTerm2是一种 OSX 的终端模拟器而非 Shell 本身。<br>   Bash是目前最通用、最常见的Shell，也是众多Linux发行版的标配。<br>   Zsh是一种更强大的、被成为“终极”的Shell，意思是Shell能具备的功能它基本都提供了。跟Bash相比，Zsh的补全功能强大了许多，可以自动补全命令、参数、文件名、进程、用户名、变量、权限符，等等…… 另外，还支持插件，通过插件又可以扩展出许多功能来。<br>   看到了一个写的很好的关于bash和Zsh的文章： <a href="https://xiaozhou.net/learn-the-command-line-iterm-and-zsh-2017-06-23.html" target="_blank" rel="noopener">https://xiaozhou.net/learn-the-command-line-iterm-and-zsh-2017-06-23.html</a></p>
</blockquote>
<h3 id="切换bash"><a href="#切换bash" class="headerlink" title="切换bash"></a>切换bash</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/bash</span><br></pre></td></tr></table></figure>

<h3 id="切换zsh"><a href="#切换zsh" class="headerlink" title="切换zsh"></a>切换zsh</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>工具、tool、zsh、 oh-my-zsh、 oh-my-zsh插件、iTerm2</tag>
      </tags>
  </entry>
  <entry>
    <title>埋点之眼球曝光</title>
    <url>/2019/12/31/%E5%9F%8B%E7%82%B9%E4%B9%8B%E7%9C%BC%E7%90%83%E6%9B%9D%E5%85%89/</url>
    <content><![CDATA[<blockquote>
<p>埋点曝光需求要求在页面在用户的视野中就发送一个曝光日志，一个页面的一个模块最多发送一次，也就是首次曝光才发送，之后在进入视野中就不用在发曝光日志了</p>
</blockquote>
<p>一、当看到这个需求的时候我们第一点肯定想到要监听滚动事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'监听滚动'</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>二、然后优化下滚动事件，加上throttle。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,newScroll(exposure,<span class="number">500</span>));</span><br><span class="line"><span class="keyword">const</span> newScroll = <span class="function"><span class="keyword">function</span>(<span class="params">realFunc,time</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">              clearTimeout(timeout);</span><br><span class="line">                   timeout = setTimeout(realFunc,time)</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exposure</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'监听滚动增加throttle'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>三、然后优化下滚动事件，加上throttle。<br><code>注意scroll监听的匿名事件是不可以取消监听事件的，我想要的是页面中所有需要曝光的地方曝光结束后，取消监听事件</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要曝光的点</span></span><br><span class="line"><span class="keyword">const</span> exposureList = [</span><br><span class="line">                &#123;</span><br><span class="line">                    selector: <span class="string">'aaaa'</span>,</span><br><span class="line">                    aid: <span class="string">'6790'</span></span><br><span class="line">                &#125;,</span><br><span class="line">            ];</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>,newScroll);</span><br><span class="line"><span class="keyword">const</span> newScroll = <span class="function"><span class="keyword">function</span>(<span class="params">realFunc,time</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">         <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">              clearTimeout(timeout);</span><br><span class="line">                   timeout = setTimeout(realFunc,time)</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;(exposure,<span class="number">500</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exposure</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(exposureList.length == <span class="number">0</span>)&#123;</span><br><span class="line">         <span class="built_in">window</span>.removeEventListener(<span class="string">"scroll"</span>, newScroll);</span><br><span class="line">  &#125;</span><br><span class="line"> exposureList.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">const</span> currentDom = <span class="built_in">document</span>.getElementById(value.selector);</span><br><span class="line">                    <span class="keyword">if</span>(currentDom)&#123;</span><br><span class="line">                        <span class="keyword">const</span> currentClientRect = currentDom.getBoundingClientRect();</span><br><span class="line">                        <span class="keyword">const</span> bottomToTopView = currentClientRect.top &gt;<span class="number">0</span> &amp;&amp; <span class="built_in">window</span>.innerHeight/<span class="number">3</span>*<span class="number">2</span>&gt;currentClientRect.top;</span><br><span class="line">                        <span class="keyword">const</span> topToBottomView  = currentClientRect.top &lt;<span class="number">0</span> &amp;&amp; currentClientRect.top &gt; - currentDom.offsetHeight/<span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span>(bottomToTopView ||topToBottomView)&#123;</span><br><span class="line">                            <span class="comment">//发送曝光事件</span></span><br><span class="line">                            exposureList.splice(index,<span class="number">1</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>tips: 这里用到了<a href="http://juejin.im/entry/59c1fd23f265da06594316a9" target="_blank" rel="noopener">getBoundingClientRect文章出处</a></em></p>
<p>getBoundingClientRect用于获得页面中某个元素的左，上，右和下分别相对浏览器视窗的位置。getBoundingClientRect是DOM元素到浏览器可视范围的距离（不包含文档卷起的部分）。</p>
<p>该函数返回一个Object对象，该对象有6个属性：top,lef,right,bottom,width,height；</p>
<p>1.兼容性<br>getBoundingClientRect()最先是IE的私有属性，现在已经是一个W3C标准。所以你不用当心浏览器兼容问题，不过还是有区别的：IE只返回top,lef,right,bottom四个值，不过可以通过以下方法来获取width,height的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(value.selector).offsetHeight();</span><br><span class="line"><span class="built_in">document</span>.getElementById(value.selector). clientHeight();</span><br></pre></td></tr></table></figure>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ro = object.getBoundingClientRect();</span><br><span class="line"><span class="keyword">var</span> Width = ro.right - ro.left;</span><br><span class="line"><span class="keyword">var</span> Height = ro.bottom - ro.top;</span><br><span class="line"></span><br><span class="line"><span class="comment">//兼容所有浏览器写法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ro = object.getBoundingClientRect();</span><br><span class="line"><span class="keyword">var</span> Top = ro.top;</span><br><span class="line"><span class="keyword">var</span> Bottom = ro.bottom;</span><br><span class="line"><span class="keyword">var</span> Left = ro.left;</span><br><span class="line"><span class="keyword">var</span> Right = ro.right;</span><br><span class="line"><span class="keyword">var</span> Width = ro.width||Right - Left;</span><br><span class="line"><span class="keyword">var</span> Height = ro.height||Bottom - Top;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>埋点</category>
      </categories>
      <tags>
        <tag>埋点之眼球曝光</tag>
      </tags>
  </entry>
  <entry>
    <title>移动开发h5表单键盘弹出问题</title>
    <url>/2020/04/09/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91h5%E8%A1%A8%E5%8D%95%E9%94%AE%E7%9B%98%E5%BC%B9%E5%87%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>最近在做移动端开发，每过一段时间，发现又出现新的兼容问题，这次也不例外。</p>
</blockquote>
<h4 id="ios手机"><a href="#ios手机" class="headerlink" title="ios手机"></a>ios手机</h4><p>之前ios手机是没有问题的，昨天测试的时候发现键盘弹出不会有遮挡input表单的问题，但是输入完成，键盘收回后发现，页面会有一个空白位置没有收回<br><img src="http://upload-images.jianshu.io/upload_images/2790249-c5d95b4cd0956021.jpeg" alt="键盘收回.jpeg"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2790249-a17cbf6d4d5b50b1.jpeg" alt="键盘弹出.jpeg"><br>可以在失去input焦点blur的时候用scrollTo做个处理还原页面的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getPlat() &#123;</span><br><span class="line">    let u &#x3D; navigator.userAgent;</span><br><span class="line">    let isAndroid &#x3D; u.indexOf(&#39;Android&#39;) &gt; -1 || u.indexOf(&#39;Adr&#39;) &gt; -1;   &#x2F;&#x2F;判断是否是 android终端</span><br><span class="line">    let isIOS &#x3D; !!u.match(&#x2F;\(i[^;]+;( U;)? CPU.+Mac OS X&#x2F;);     &#x2F;&#x2F;判断是否是 iOS终端</span><br><span class="line">    if (isAndroid) &#123;</span><br><span class="line">      return &#39;Android&#39;;</span><br><span class="line">    &#125; else if (isIOS) &#123;</span><br><span class="line">      return &#39;IOS&#39;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return &#39;PC&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (getPlat() &#x3D;&#x3D;&#x3D; &#39;IOS&#39;) &#123;</span><br><span class="line">                    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                    const scrollHeight &#x3D; document.documentElement.scrollTop || document.body.scrollTop || 0;</span><br><span class="line">                        window.scrollTo(0, Math.max(scrollHeight - 1, 0));</span><br><span class="line">                    &#125;, 0);</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Android手机（测试机有oppo、华为、三星、锤子）"><a href="#Android手机（测试机有oppo、华为、三星、锤子）" class="headerlink" title="Android手机（测试机有oppo、华为、三星、锤子）"></a>Android手机（测试机有oppo、华为、三星、锤子）</h4><p>但是在Android 手机中就没有这么容易了，测试发现，安卓手机中如果不做任何处理，弹出的键盘会遮盖输入框，但是键盘弹出后手动滚动页面，收回键盘，在聚焦弹出键盘就会定位到上次滚动的地方。其实这样也还好，但是测试要求想要自动展示到键盘上方。所以我需要做些兼容处理<br>经检测有几种解决办法：<br>一、修改输入登录模块的定位用fixed、会跟着键盘一起动，可以在聚焦失焦给样式做些处理，但是会麻烦一些<br><strong>二、scrollIntoView 与 scrollIntoViewIfNeeded API</strong><br>可以在页面挂载完成mounted的时候做处理，统一对所有的input和textarea做处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ((&#x2F;Android&#x2F;gi).test(navigator.userAgent)) &#123;</span><br><span class="line">    window.addEventListener(&#39;resize&#39;, function () &#123;</span><br><span class="line">        if (document.activeElement.tagName &#x3D;&#x3D; &#39;INPUT&#39; || document.activeElement.tagName &#x3D;&#x3D; &#39;TEXTAREA&#39;) &#123;</span><br><span class="line">            window.setTimeout(function () &#123;</span><br><span class="line">                document.activeElement.scrollIntoViewIfNeeded();</span><br><span class="line">            &#125;, 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者在input聚焦focus的时候做处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input</span><br><span class="line">    v-model&#x3D;&quot;codeValue&quot;</span><br><span class="line">    type&#x3D;&quot;text&quot;</span><br><span class="line">    placeholder&#x3D;&quot;请输入收到的验证码&quot;</span><br><span class="line">    class&#x3D;&quot;verify-input&quot;</span><br><span class="line">    maxlength&#x3D;&quot;6&quot;</span><br><span class="line">    @focus&#x3D;&quot;changefocus&quot;</span><br><span class="line">    @blur.prevent&#x3D;&quot;blur&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        blur()&#123;</span><br><span class="line">            if (judgeClient() &#x3D;&#x3D;&#x3D; &#39;IOS&#39;) &#123;</span><br><span class="line">                setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                const scrollHeight &#x3D; document.documentElement.scrollTop || document.body.scrollTop || 0;</span><br><span class="line">                    window.scrollTo(0, Math.max(scrollHeight - 1, 0));</span><br><span class="line">                &#125;, 0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        changefocus() &#123;</span><br><span class="line">            if (this.getPlat() &#x3D;&#x3D;&#x3D; &#39;Android&#39;) &#123;</span><br><span class="line">                    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                        el.target.scrollIntoViewIfNeeded(true);</span><br><span class="line">                        el.target.scrollIntoView(true);</span><br><span class="line">                    &#125;, 200);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        getPlat() &#123;</span><br><span class="line">            let u &#x3D; navigator.userAgent;</span><br><span class="line">            let isAndroid &#x3D; u.indexOf(&#39;Android&#39;) &gt; -1 || u.indexOf(&#39;Adr&#39;) &gt; -1;   &#x2F;&#x2F;判断是否是 android终端</span><br><span class="line">            let isIOS &#x3D; !!u.match(&#x2F;\(i[^;]+;( U;)? CPU.+Mac OS X&#x2F;);     &#x2F;&#x2F;判断是否是 iOS终端</span><br><span class="line">            if (isAndroid) &#123;</span><br><span class="line">                return &#39;Android&#39;;</span><br><span class="line">            &#125; else if (isIOS) &#123;</span><br><span class="line">                return &#39;IOS&#39;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return &#39;PC&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>安卓手机有延迟，有时生效，有时会失效，可能setTimeout设置的延迟事件不够，我设置100的时候还会经常没生效，但是设置200貌似就好很多</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>JavaScript、移动开发、移动键盘弹出问题、vue</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端Charles抓取https包</title>
    <url>/2020/03/03/%E7%A7%BB%E5%8A%A8%E7%AB%AFCharles%E6%8A%93%E5%8F%96https%E5%8C%85/</url>
    <content><![CDATA[<p><strong>一、安装charles抓包工具</strong><br><strong>二、配置Charles，允许抓取https包</strong><br>Proxy-&gt;SSL Proxying Settings…，勾选Enable SSL Proxying，Add一个locations，通过通配符* 抓取所有域名的https。（如果想只抓取某个域名的，设置具体域名的即可）<br><img src="http://upload-images.jianshu.io/upload_images/2790249-1d043b6fa5666473.png" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2790249-bfdf31a2f707ff5b.png" alt="image.png"><br><strong>三、PC端Charles安装https证书</strong><br>Help-&gt;SSL Proxying -&gt;Install Charles Root Certificate，然后在钥匙串中信任证书即可</p>
<p>如果想要抓取pc端的接口请求勾选上macOS proxy就可以了<br><img src="http://upload-images.jianshu.io/upload_images/2790249-e7168a064945388d.png" alt="image.png"></p>
<p><strong>四、手机端手机端配置PC的代理并下载Charles的证书</strong><br>首先需要手机连接到与当前电脑同一个wifi局域网，对该wifi网络进行高级设置-代理：<br>代理服务器主机名：使用PC的本机IP地址<br>代理服务器端口：使用Charles设置的Port值，默认是8888，可以在下图proxy Settings查看端口号<br><img src="http://upload-images.jianshu.io/upload_images/2790249-77356ca93f4d9056.png" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2790249-0cf97ba85f8f16b4.png" alt="image.png"><br>然后确定保存，第一次配置完代理，PC端会弹窗询问是否允许代理，点击allow<br><img src="http://upload-images.jianshu.io/upload_images/2790249-47ff85d660781b49.png" alt="image.png"></p>
<p>这时我们的手机就已经挂上代理了。你也可以这么通过add添加<br><img src="http://upload-images.jianshu.io/upload_images/2790249-a370ec70bedc4070.png" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2790249-f0d2bfa892652d8e.png" alt="image.png"></p>
<p>挂上代理了之后手机端需要在浏览器中访问chls.pro/ssl 下载证书<br><a href="http://www.charlesproxy.com/getssl/" target="_blank" rel="noopener">www.charlesproxy.com/getssl/</a><br><img src="http://upload-images.jianshu.io/upload_images/2790249-72e630fafbfe1717.png" alt="image.png"><br><img src="http://upload-images.jianshu.io/upload_images/2790249-38ae3f2317742b34.png" alt="image.png"><br>ios10以上系统不会自动信任证书，需要在设置-&gt;通用-&gt;关于本机，信任安装的证书</p>
<p>现在客户端环境下，我们已经可以随时调试本地的H5代码了。<br>Charles结合nginx和ihost开发，在nginx代理的时候在开启charles用手机访问开发文件可能访问不到，可能是自制证书不信任的问题，需要对nginx和chrome做特殊处理<br><a href="https://www.jianshu.com/p/71095e5ca9b3" target="_blank" rel="noopener">设置本地 nginx 的 HTTPS（证书设置信任）</a></p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>Charles</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>Charles</tag>
      </tags>
  </entry>
  <entry>
    <title>如何配置虚拟机的ssh，跳板机配置ssh 文件可以简化输入</title>
    <url>/2020/06/26/%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84ssh%EF%BC%8C%E8%B7%B3%E6%9D%BF%E6%9C%BA%E9%85%8D%E7%BD%AEssh%20%E6%96%87%E4%BB%B6%E5%8F%AF%E4%BB%A5%E7%AE%80%E5%8C%96%E8%BE%93%E5%85%A5/</url>
    <content><![CDATA[<p>快速配置开发机（虚拟机）登录操作<br>vim 修改当前文件夹下的config文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim .ssh&#x2F;config </span><br><span class="line">或</span><br><span class="line">vim ~&#x2F;.ssh&#x2F;config</span><br></pre></td></tr></table></figure>
<p>查看.ssh目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root&#x2F;.ssh</span><br><span class="line">或者</span><br><span class="line">cd ~&#x2F;.ssh</span><br></pre></td></tr></table></figure>
<p>然后将ssh放进去，就可以不用每次输入用户名密码了<br>.ssh/config文件如下配置 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##测试环境跳板机##</span><br><span class="line">Host test</span><br><span class="line">HostName 10.1.xxx.xxx</span><br><span class="line">User 用户名</span><br><span class="line">Port 22</span><br></pre></td></tr></table></figure>
<p>保存后打开terminal 执行<code>ssh test</code>则登陆test的跳板机（虚拟机）上面了</p>
<p>如果没权限，输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure>
<p>当然还有更加高效的工具就是secureCRT 可以记录密码等可视化便捷操作<br><a href="https://www.jianshu.com/p/637d154d0458" target="_blank" rel="noopener">windows 安装操作secureCRT</a><br>mac 安装操作secureCRT 待补充，还可以做一些配色操作让界面看起来非常舒适</p>
]]></content>
      <categories>
        <category>开发机、虚拟机</category>
        <category>ssh</category>
      </categories>
      <tags>
        <tag>开发机、虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端(ios、android)上传图片遇到的兼容问题</title>
    <url>/2020/06/26/%E7%A7%BB%E5%8A%A8%E7%AB%AF(ios%E3%80%81android)%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E9%81%87%E5%88%B0%E7%9A%84%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>最近接了一个需求，需要做上传，框架用多了，本来以为这些东西拿过来直接用就行，但是在开发过程中发现了一些问题：</p>
</blockquote>
<h3 id="一、安卓手机上传图片没有拍照选项、ios没有拍照选择相册功能"><a href="#一、安卓手机上传图片没有拍照选项、ios没有拍照选择相册功能" class="headerlink" title="一、安卓手机上传图片没有拍照选项、ios没有拍照选择相册功能"></a>一、安卓手机上传图片没有拍照选项、ios没有拍照选择相册功能</h3><p>1、按照以下方式写安卓手机没有拍照选项，只能传图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;pic&quot; id&#x3D;&quot;pic&quot; accept&#x3D;&quot;image&#x2F;gif, image&#x2F;jpeg&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>
<p>2、按照以下方式写ios手机正常，有选择图片和拍照上传功能，安卓手机大部分没有问题，但是安卓10版本没有拍照上传功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;choose&quot; accept&#x3D;&quot;image&#x2F;*&quot;  multiple&gt;</span><br></pre></td></tr></table></figure>
<p>3、按照以下方式写ios手机直接唤起拍照功能，没有选择图片上传功能，（安卓10版本预计可以拍照上传）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;file&quot; id&#x3D;&quot;choose&quot; accept&#x3D;&quot;image&#x2F;*&quot; capture&#x3D;&quot;camera&quot; multiple&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>accept表示打开的系统文件目录<br>capture表示的是系统所捕获的默认设备，<br>camera：照相机；camcorder：摄像机；microphone：录音；<br>其中还有一个属性multiple，支持多选，当支持多选时，multiple优先级高于capture，所以只用写成： </p>
</blockquote>
<h3 id="二、优化上传图片增加图片上传压缩功能"><a href="#二、优化上传图片增加图片上传压缩功能" class="headerlink" title="二、优化上传图片增加图片上传压缩功能"></a>二、优化上传图片增加图片上传压缩功能</h3><p>用canvas压缩图片的原理就是读取图片的文件，然后把图片画在画布上，再用canvas自带的一个接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">canvas.toDataURL(type,encoderOptions);</span><br></pre></td></tr></table></figure>
<p>第二个参数encoderOptions决定了图片压缩的程度，可以在0-1中选择一个值，当然推荐不要低于0.5，因为这样保存后的图片质量不太好。<br>这个方法执行完后会返回一个值，就是图片的base64格式的字符串，这个字符串就可以上传到服务端。</p>
<h3 id="三、移动端IOS系统手机拍照图片Canvas压缩上传后图片旋转的bug"><a href="#三、移动端IOS系统手机拍照图片Canvas压缩上传后图片旋转的bug" class="headerlink" title="三、移动端IOS系统手机拍照图片Canvas压缩上传后图片旋转的bug"></a>三、移动端IOS系统手机拍照图片Canvas压缩上传后图片旋转的bug</h3><p>网上大部分是说exfe.js来读取图片信息，我们上传的图片里面是有很多信息的<br>这里我们需要拿到Orientation的值有1，3，6，8之类的，分别代表0°，180°，顺时针90°，逆时针90°<br><img src="https://upload-images.jianshu.io/upload_images/2790249-123b3dd7e8e898ac.png" alt="Orientation"><br><a href="https://rzrobert.github.io/2017/04/19/ios%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%97%8B%E8%BD%AC%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">图片原文</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;获取照片方向角属性，用户旋转控制</span><br><span class="line"></span><br><span class="line">EXIF.getData(file, function() &#123;</span><br><span class="line"></span><br><span class="line">    EXIF.getAllTags(this);</span><br><span class="line"></span><br><span class="line">    Orientation &#x3D; EXIF.getTag(this, &#39;Orientation&#39;);</span><br><span class="line"></span><br><span class="line">    console.log(Orientation);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>但是，这里正常是我拿到角度之后绘制图片按照角度回正，大部分机器是没有问题的，安卓手机测试了下，什么角度拍照Orientation都为1，IOS的Orientation都是按照角度返回的，<code>但是在IOS13.4版本以后，带有角度上传的图片也不会旋转,所以需要版本号判断IOS13.4以后不做回正处理</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let iosVersion &#x3D; UserAgent.str.match(&#x2F;CPU iPhone OS (.*?) like Mac OS&#x2F;);</span><br><span class="line">  if(UserAgent.env.ios &amp;&amp;  iosVersion &amp;&amp; compareVersion([13,4],iosVersion[1].split(&#39;_&#39;))&lt;0)&#123;</span><br><span class="line">    callback(-5);</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const canvas &#x3D; document.createElement(&#39;canvas&#39;);</span><br><span class="line">    canvas.width &#x3D; width &#x3D; drawWidth;</span><br><span class="line">    canvas.height &#x3D; height &#x3D; drawHeight;</span><br><span class="line">    const context &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class="line">    &#x2F;&#x2F;判断图片方向，重置canvas大小，确定旋转角度，iphone默认的是home键在右方的横屏拍摄方式</span><br><span class="line">    switch (dir) &#123;</span><br><span class="line">      &#x2F;&#x2F;iphone横屏拍摄，此时home键在左侧 </span><br><span class="line">      case 3:</span><br><span class="line">        degree &#x3D; 180;</span><br><span class="line">        startX &#x3D; - width;</span><br><span class="line">        startY &#x3D; - height;</span><br><span class="line">        drawWidth &#x3D; width;</span><br><span class="line">        drawHeight &#x3D; height;</span><br><span class="line">        break;</span><br><span class="line">      &#x2F;&#x2F;iphone竖屏拍摄，此时home键在下方(正常拿手机的方向) </span><br><span class="line">      case 6:</span><br><span class="line">        canvas.width &#x3D; height;</span><br><span class="line">        canvas.height &#x3D; width;</span><br><span class="line">        degree &#x3D; 90;</span><br><span class="line">        startY &#x3D; - height;</span><br><span class="line">        drawWidth &#x3D; width;</span><br><span class="line">        drawHeight &#x3D; height;</span><br><span class="line">        break;</span><br><span class="line">      &#x2F;&#x2F;iphone竖屏拍摄，此时home键在上方 </span><br><span class="line">      case 8:</span><br><span class="line">        canvas.width &#x3D; height;</span><br><span class="line">        canvas.height &#x3D; width;</span><br><span class="line">        degree &#x3D; 270;</span><br><span class="line">        startX &#x3D; - height;</span><br><span class="line">        drawWidth &#x3D; width;</span><br><span class="line">        drawHeight &#x3D; height;</span><br><span class="line">        break;</span><br><span class="line">      default:</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;使用canvas旋转校正</span><br><span class="line">    context.rotate(degree * Math.PI &#x2F; 180);</span><br><span class="line">&#x2F;&#x2F;canvas rotate旋转角度是根据原点（0，0）开始旋转的，所以绘制的起始坐标需要改变，并不是一直从0，0绘制</span><br><span class="line">    context.drawImage(this, startX, startY, drawWidth, drawHeight);</span><br></pre></td></tr></table></figure>
<h3 id="四、前端上传图片利用canvas水印合成"><a href="#四、前端上传图片利用canvas水印合成" class="headerlink" title="四、前端上传图片利用canvas水印合成"></a>四、前端上传图片利用canvas水印合成</h3><h3 id="大体步骤："><a href="#大体步骤：" class="headerlink" title="大体步骤："></a>大体步骤：</h3><p>用户使用input file上传图片的时候，利用 FileReader ,读取 blob对象 ,或者是 file对象 ，将图片转化为 data uri （base64格式）的形式。<br>使用 canvas ,在页面上新建一个画布,利用 canvas 提供的API,将图片画入这个画布当中。<br>利用 canvas.toDataURL() ，进行图片的压缩，得到图片的 data uri 的值，用来上传。<br>获取到压缩后的base64格式图片数据，转成二进制塞入formdata，再通过XmlHttpRequest提交formdata。</p>
<p><a href="https://juejin.im/post/5d54d27df265da03ce39d1a3" target="_blank" rel="noopener">参照文章</a><br><a href="https://www.jianshu.com/p/bc3f6076b36e" target="_blank" rel="noopener">参照文章</a><br><a href="https://www.zhangxinxu.com/wordpress/2017/05/canvas-picture-watermark-synthesis/" target="_blank" rel="noopener">参照文章水印合成</a></p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>H5</category>
      </categories>
      <tags>
        <tag>移动端(ios、android)</tag>
      </tags>
  </entry>
  <entry>
    <title>docker上手安装mongo、node、yapi部署以及dockerfile定制镜像</title>
    <url>/2020/11/24/docker%20%E4%B8%8A%E6%89%8B%E5%AE%89%E8%A3%85mongo%E3%80%81node%E3%80%81yapi%20%E9%83%A8%E7%BD%B2%E4%BB%A5%E5%8F%8Adockerfile%E5%AE%9A%E5%88%B6%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>安装mongo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mongo</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker search mongo</span><br></pre></td></tr></table></figure>

<p>本地docker上启动mongo</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -itd --name mongo -p 27017:27017 mongo --auth</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose-安装yapi"><a href="#docker-compose-安装yapi" class="headerlink" title="docker-compose 安装yapi"></a>docker-compose 安装yapi</h3><p>docker-compose.yml <a href="mailto:admin@163.com">admin@163.com</a>登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &#39;3&#39;</span><br><span class="line">services:</span><br><span class="line">  yapi-web:</span><br><span class="line">    image: jayfong&#x2F;yapi:latest</span><br><span class="line">    container_name: yapi-web</span><br><span class="line">    ports:</span><br><span class="line">      - 40001:3000</span><br><span class="line">    environment:</span><br><span class="line">      - YAPI_ADMIN_ACCOUNT&#x3D;admin@163.com</span><br><span class="line">      - YAPI_ADMIN_PASSWORD&#x3D;admin</span><br><span class="line">      - YAPI_CLOSE_REGISTER&#x3D;true</span><br><span class="line">      - YAPI_DB_SERVERNAME&#x3D;yapi-mongo</span><br><span class="line">      - YAPI_DB_PORT&#x3D;27017</span><br><span class="line">      - YAPI_DB_DATABASE&#x3D;yapi</span><br><span class="line">      - YAPI_MAIL_ENABLE&#x3D;false</span><br><span class="line">      - YAPI_LDAP_LOGIN_ENABLE&#x3D;false</span><br><span class="line">      - YAPI_PLUGINS&#x3D;[]</span><br><span class="line">    depends_on:</span><br><span class="line">      - yapi-mongo</span><br><span class="line">    links:</span><br><span class="line">      - yapi-mongo</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">  yapi-mongo:</span><br><span class="line">    image: mongo:latest</span><br><span class="line">    container_name: yapi-mongo</span><br><span class="line">    volumes:</span><br><span class="line">      - .&#x2F;data&#x2F;db:&#x2F;data&#x2F;db</span><br><span class="line">      - .&#x2F;data&#x2F;log:&#x2F;var&#x2F;log&#x2F;mongodb</span><br><span class="line">    expose:</span><br><span class="line">      - 27017</span><br><span class="line">    restart: unless-stopped</span><br></pre></td></tr></table></figure>

<p>或者Dockerfile安装yapi</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">######## 构建 ########</span><br><span class="line">FROM --platform&#x3D;$&#123;BUILDPLATFORM:-amd64&#125; node:12.16.3-alpine3.11 as builder</span><br><span class="line"></span><br><span class="line"># 安装构建工具</span><br><span class="line">RUN apk add --update --no-cache ca-certificates curl wget cmake build-base git bash python make gcc g++ zlib-dev autoconf automake file nasm \</span><br><span class="line">  &amp;&amp; update-ca-certificates</span><br><span class="line"></span><br><span class="line"># YApi 版本</span><br><span class="line">ENV YAPI_VERSION&#x3D;1.9.2</span><br><span class="line"></span><br><span class="line"># 编译脚本</span><br><span class="line">WORKDIR &#x2F;yapi&#x2F;scripts</span><br><span class="line">COPY . .</span><br><span class="line">RUN yarn &amp;&amp; yarn build</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;yapi&#x2F;vendors</span><br><span class="line"></span><br><span class="line"># 拉取 YApi 源码</span><br><span class="line">RUN git clone \</span><br><span class="line">  --branch &quot;v$&#123;YAPI_VERSION&#125;&quot; \</span><br><span class="line">  --single-branch \</span><br><span class="line">  --depth 1 \</span><br><span class="line">  https:&#x2F;&#x2F;github.com&#x2F;YMFE&#x2F;yapi.git .</span><br><span class="line"></span><br><span class="line"># 拷贝启动脚本</span><br><span class="line">RUN cp &#x2F;yapi&#x2F;scripts&#x2F;start.js .&#x2F;start.js</span><br><span class="line"></span><br><span class="line"># 执行一些准备工作</span><br><span class="line">RUN node &#x2F;yapi&#x2F;scripts&#x2F;prepare.js $(pwd)</span><br><span class="line"></span><br><span class="line"># 安装依赖</span><br><span class="line">RUN yarn</span><br><span class="line"></span><br><span class="line"># 清理文件</span><br><span class="line">RUN node &#x2F;yapi&#x2F;scripts&#x2F;clean.js $(pwd)</span><br><span class="line"></span><br><span class="line"># 构建应用</span><br><span class="line">RUN yarn build-client</span><br><span class="line"></span><br><span class="line"># 再次清理以删除构建缓存文件</span><br><span class="line">RUN node &#x2F;yapi&#x2F;scripts&#x2F;clean.js $(pwd)</span><br><span class="line"></span><br><span class="line"># 删除脚本</span><br><span class="line">RUN rm -rf &#x2F;yapi&#x2F;scripts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">######## 镜像 ########</span><br><span class="line">FROM node:12.16.3-alpine3.11</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;yapi</span><br><span class="line"></span><br><span class="line">COPY --from&#x3D;builder &#x2F;yapi .</span><br><span class="line"></span><br><span class="line">EXPOSE 3000</span><br><span class="line"></span><br><span class="line">CMD [&quot;node&quot;, &quot;&#x2F;yapi&#x2F;vendors&#x2F;start.js&quot;]</span><br></pre></td></tr></table></figure>
<p>Dockerfile.web</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM jayfong&#x2F;yapi:latest</span><br><span class="line"></span><br><span class="line">ENV YAPI_ADMIN_ACCOUNT&#x3D;admin@163.com</span><br><span class="line">ENV YAPI_ADMIN_PASSWORD&#x3D;admin</span><br><span class="line">ENV YAPI_CLOSE_REGISTER&#x3D;false</span><br><span class="line">ENV YAPI_DB_SERVERNAME&#x3D;127.0.0.1</span><br><span class="line">ENV YAPI_DB_PORT&#x3D;27017</span><br><span class="line">ENV YAPI_DB_DATABASE&#x3D;yapi</span><br><span class="line">ENV YAPI_MAIL_ENABLE&#x3D;false</span><br><span class="line">ENV YAPI_LDAP_LOGIN_ENABLE&#x3D;false</span><br><span class="line">ENV YAPI_PLUGINS&#x3D;[]</span><br><span class="line"></span><br><span class="line">RUN echo &#39;http:&#x2F;&#x2F;dl-cdn.alpinelinux.org&#x2F;alpine&#x2F;v3.6&#x2F;main&#39; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">  echo &#39;http:&#x2F;&#x2F;dl-cdn.alpinelinux.org&#x2F;alpine&#x2F;v3.6&#x2F;community&#39; &gt;&gt; &#x2F;etc&#x2F;apk&#x2F;repositories &amp;&amp; \</span><br><span class="line">  apk add --update --no-cache mongodb &amp;&amp; \</span><br><span class="line">  mkdir -p &#x2F;data&#x2F;db</span><br><span class="line"></span><br><span class="line">EXPOSE $PORT</span><br><span class="line"></span><br><span class="line">CMD mongod --fork --logpath&#x3D;mongodb.log &amp;&amp; node &#x2F;yapi&#x2F;vendors&#x2F;start.js</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>team-norm团队规范</category>
        <category>mock-data-norm模拟数据规范</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>mongo</tag>
        <tag>yapi</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker简介安装</title>
    <url>/2020/11/24/Docker%E7%AE%80%E4%BB%8B%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker?"></a>什么是Docker?</h1><blockquote>
<p>Docker 是⼀个开源，轻量级的应⽤容器引擎,以前我们想在window折腾linux系统，在上⾯部署应⽤来测试什么的，我们通常会安装⼀个虚拟机，在虚拟机上安装操作系统啊，应⽤什么的，搞垮了可以重新来什么的，不影响主机的系统，不过虚拟机⽐较重，启动慢，现在我们⽤docker，相⽐于虚拟机装操作系统，Docker是使⽤容器承载应⽤程序，轻量，⾼效，⽅便快捷的部署</p>
</blockquote>
<ul>
<li>装应用的容器</li>
<li>开发、测试、运维都偏爱的容器化技术</li>
<li>轻量级</li>
<li>扩展性</li>
<li>一次构建、多次分享、随处运行</li>
</ul>
<h1 id="Docker的基本概念"><a href="#Docker的基本概念" class="headerlink" title="Docker的基本概念"></a>Docker的基本概念</h1><p>镜像(Image)、容器(Container)与仓库(Repository)，这三个是docker中最基本也是最核心的概念，对这三个概念的掌握与理解，是学习docker的关键。</p>
<p><strong>镜像(Image)</strong><br>Docker本质上是一个运行在Linux操作系统上的应用，而Linux操作系统分为内核和用户空间，无论是Centos还是Ubuntu，都是在启动内核之后，通过挂载Root文件系统来提供用户空间的,而Docker镜像就是一个Root文件系统。镜像Image就是相当于安装操作的系统盘，U盘等等，⾥⾯可以包含node、gitlab等等，当然也可以包含完整的centos系统，甚⾄是centos + jenkins的或者centos + verdaccio(npm 私有库)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 列出所有镜像</span><br><span class="line">docker image ls</span><br><span class="line"># 列表所有镜像</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>从仓库拉取镜像<br>前面我们已经演示过使用docker pull命令拉取了hello-world镜像了，当然使用docker image pull命令也是一样的。<br>一般默认是从Docker Hub上拉取镜像的，Docker Hub是Docker官方提供的镜像仓库服务(Docker Registry)，有大量官方或第三方镜像供我们使用，比如我们可以在命令行中输入下面的命令直接拉取一个Centos镜像：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure>
<p>复制代码docker pull命令的完整写法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull [选项] [Docker Registry 地址[:端口号]&#x2F;]仓库名[:标签]</span><br></pre></td></tr></table></figure>
<p>复制代码拉取一个镜像，需要指定Docker Registry的地址和端口号，默认是Docker Hub，还需要指定仓库名和标签，仓库名和标签唯一确定一个镜像，而标签是可能省略，如果省略，则默认使用latest作为标签名，另外，仓库名则由作者名和软件名组成。<br>那么，我们上面使用centos，那是因为省略作者名，则作者名library,表示Docker官方的镜像，所以上面的命令等同于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull library&#x2F;centos:latest</span><br></pre></td></tr></table></figure>
<p>复制代码因此，如果拉取非官方的第三方镜像，则需要指定完整仓库名，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull mysql&#x2F;mysql-server:latest</span><br></pre></td></tr></table></figure>
<p>复制代码运行镜像<br>使用docker run命令，可以通过镜像创建一个容器，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure>
<p>查看主机下存在的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p>复制代码删除镜像<br>当本地有些镜像我们不需要时，那我们也可以删除该镜像，以节省存储空间，不过要注意，如果有使用该镜像创建的容器未删除，则不允许删除镜像。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># image_name表示镜像名，image_id表示镜像id</span><br><span class="line">dockere image rm image_name&#x2F;image_id</span><br></pre></td></tr></table></figure>
<p>复制代码删除镜像的快捷命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi image_name&#x2F;image_id</span><br></pre></td></tr></table></figure>
<p>复制代码好了，关于Docker镜像的相关知识，我们就简单地介绍到这里，有机会的话，我们单独写一篇文章来谈谈，特别构建Docker镜像部分的相关知识，有必要深入再学习一下。</p>
<p>** 容器(Container)**<br>容器(Container)就是实际上跑应⽤的地⽅啦，可以理解为⼀个个互相隔离的⼩虚拟机，你的镜像就是安装在这⾥<br>启动容器有两种方式，一种是我们前面已经介绍过的，使用docker run命令通过镜像创建一个全新的容器，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
<p>复制代码另外一种启动容器的方式就是启动一个已经停止运行的容器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># container_id表示容器的id</span><br><span class="line">docker start container_id</span><br></pre></td></tr></table></figure>
<p>复制代码要停止正在运行的容器可以使用docker container stop或docker stop命令，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># container_id表示容器的id</span><br><span class="line">docker stop container_id</span><br></pre></td></tr></table></figure>
<p>容器名或ID：重启容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker restart</span><br></pre></td></tr></table></figure>
<p>如果要查看本地所有的容器，可以使用docker container ls命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看所有容器</span><br><span class="line">docker container ls</span><br></pre></td></tr></table></figure>
<p>复制代码查看所有容器也有简洁的写法，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看所有容器</span><br><span class="line">docker ps</span><br><span class="line">docker ps -a ：查看当前容器的运行状态（-a 是查看当前所有的容器，包括未运行的）</span><br></pre></td></tr></table></figure>
<p>删除容器<br>我们也可以使用docker container rm命令，或简洁的写法docker rm命令来删除容器，不过不允许删除正在运行的容器，因此如果要删除的话，就必须先停止容器，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># container_id表示容器id,通过docker ps可以看到容器id</span><br><span class="line">docker container rm image_name ：删除镜像（先停止容器）</span><br><span class="line"></span><br><span class="line">$ docker rm container_id</span><br><span class="line">$ docker rm -f container_id(第一个字符即可) container_id第一个单词  强制删除</span><br></pre></td></tr></table></figure>
<p>复制代码当我们需要批量删除所有容器，可以用下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除所有容器</span><br><span class="line">docker rm $(docker ps -q)</span><br></pre></td></tr></table></figure>
<p>复制代码# 删除所有退出的容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure>
<p>复制代码进入容器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 进入容器,container_id表示容器的id,command表示linux命令,如&#x2F;bin&#x2F;bash</span><br><span class="line">docker exec -it container_id command</span><br></pre></td></tr></table></figure>
<p>端口映射<br>端口映射有三种方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -itd -p 9090:9090 alpine_test(container_name) sh</span><br></pre></td></tr></table></figure>
<p>映射指定地址的主机端口到容器端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker -p ip:hostPort:containerPort</span><br><span class="line"></span><br><span class="line">比如：docker run  -p 127.0.0.1:3306:3306 映射本机3306端口到容器的3306端口</span><br></pre></td></tr></table></figure>
<p>映射指定地址的任意可用端口到容器端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker -p ip::containerPort</span><br><span class="line"></span><br><span class="line">比如：docker run  -p 127.0.0.1::3306 映射本机的随机可用端口到容器3306端口</span><br></pre></td></tr></table></figure>
<p>映射本机的指定端口到容器的指定端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docer -p hostPort:containerPort</span><br><span class="line"></span><br><span class="line">比如：docker run -p 3306:3306 # 映射本机的3306端口到容器的3306端口</span><br></pre></td></tr></table></figure>
<p><strong>仓库(Repository)</strong><br>仓库(Repository) ⽤于存放镜像，有点类似的git仓库，docker hub是个公共的仓库，不过在我们这边⽹速慢，⼀般把源设置为淘宝源等</p>
<p>后⾯我们会⽤⼏个docker容器分别安装jenkins、verdaccio、yapi等组成⼀个单机的⼩⼩微服务，现在多多少少知道为什么要⽤docker了吧</p>
<h3 id="window安装docker"><a href="#window安装docker" class="headerlink" title="window安装docker"></a>window安装docker</h3><h4 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;hub.docker.com&#x2F;editions&#x2F;community&#x2F;docker-ce-desktop-windows&#x2F;</span><br></pre></td></tr></table></figure>
<p>按照安装向导next即可</p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>不会自动启动<br>在开始菜单搜索Docker, 打开即可<br><img src="https://upload-images.jianshu.io/upload_images/2790249-ae7ce650dd3ba0e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>细节配置, 可参考这个链接（<a href="https://docs.docker.com/docker-for-windows/#docker-settings-dialog）" target="_blank" rel="noopener">https://docs.docker.com/docker-for-windows/#docker-settings-dialog）</a></p>
<h4 id="测试是否安装成功"><a href="#测试是否安装成功" class="headerlink" title="测试是否安装成功"></a>测试是否安装成功</h4><p>在CMD中运行如下命令, 有显示版本号或者显示”Hello from Docker!”, 则代表安装成功</p>
<ul>
<li>查看版本号<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>
列出容器<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line"></span><br><span class="line">OPTIONS说明：</span><br><span class="line"></span><br><span class="line">-a :显示所有的容器，包括未运行的。</span><br><span class="line"></span><br><span class="line">-f :根据条件过滤显示的内容。</span><br><span class="line"></span><br><span class="line">--format :指定返回值的模板文件。</span><br><span class="line"></span><br><span class="line">-l :显示最近创建的容器。</span><br><span class="line"></span><br><span class="line">-n :列出最近创建的n个容器。</span><br><span class="line"></span><br><span class="line">--no-trunc :不截断输出。</span><br><span class="line"></span><br><span class="line">-q :静默模式，只显示容器编号。</span><br><span class="line"></span><br><span class="line">-s :显示总的文件大小。</span><br></pre></td></tr></table></figure></li>
<li>安装nginx<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run nginx</span><br><span class="line">docker run -p 8080:80 nginx</span><br></pre></td></tr></table></figure>
<a href="https://zhuanlan.zhihu.com/p/82269806" target="_blank" rel="noopener">史上最全Docker环境安装指南</a><br><a href="https://juejin.im/post/6844903918372143112" target="_blank" rel="noopener">10分钟快速掌握Docker必备基础知识</a></li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>SecureCRT / FX 8.0.0（ build 1063 ）for Windows 破解版</title>
    <url>/2020/06/26/SecureCRT/</url>
    <content><![CDATA[<h1 id="SecureCRT-FX-8-0-0（-build-1063-）for-Windows-破解版"><a href="#SecureCRT-FX-8-0-0（-build-1063-）for-Windows-破解版" class="headerlink" title="SecureCRT / FX 8.0.0（ build 1063 ）for Windows 破解版"></a>SecureCRT / FX 8.0.0（ build 1063 ）for Windows 破解版</h1><ul>
<li><p>By <a href="https://ccie.lol/blog/author/viska/" target="_blank" rel="noopener" title="由Ricky发布">Ricky</a></p>
</li>
<li><p>Under <a href="https://ccie.lol/blog/category/software/" target="_blank" rel="noopener">Software</a></p>
</li>
</ul>
<p>| 如需注册 @ccie.engineer、@ccde.engineer、@ccar.engineer、@hcie.engineer、@rhce.engineer 和 @cissp.engineer 邮箱，请<a href="https://ccie.lol/blog/2016/12/17/mail/" target="_blank" rel="noopener">点击这里</a>。 |</p>
<h3 id="1、应用介绍："><a href="#1、应用介绍：" class="headerlink" title="1、应用介绍："></a><strong>1、应用介绍：</strong></h3><p>SecureCRT 是一款 Windows 上专业的终端 SSH 工具，类似于 Windows 中的 Putty ，SecureCRT 支持 SSH1 、SSH2 、Telnet 等远程连接，同时具有很多实用和专业的辅助功能，支持广泛的终端仿真、文件传输、脚本等，非常的优秀！</p>
<h3 id="2、破解方法："><a href="#2、破解方法：" class="headerlink" title="2、破解方法："></a><strong>2、破解方法：</strong></h3><h4 id="7-3-4-amp-8-0-0"><a href="#7-3-4-amp-8-0-0" class="headerlink" title="7.3.4 &amp; 8.0.0"></a><strong>7.3.4 &amp; 8.0.0</strong></h4><ol>
<li>安装好 SecureCRT 软件；</li>
<li>确保 SecureCRT 软件处于关闭状态；</li>
<li>将注册机（注册机文件在压缩包里，文件名一般是 keygen.exe ）复制到 SecureCRT 软件的安装目录下，安装目录默认是：C:\Program Files\VanDyke Software\SecureCRT\ ；</li>
<li>运行注册机，点击 Patch 按钮，此时会让你替换掉两个可执行文件（分别是 SecureCRT.exe 和 LicenseHelper.exe ），在弹出的窗口中先选择 SecureCRT.exe ，然后再选择 LicenseHelper.exe 即可完成替换，替换是否成功是会有提示的；</li>
<li>最后打开 SecureCRT 软件，此时会弹出一个输入 key 的页面，什么都不输入，点击 Continue ，再点击 Enter License Manually 就会看到输入 Name 和 Company 等信息的页面了，在这个页面输入注册机上显示的信息即可激活 SecureCRT 软件（在注册机上点击 Generate 按钮即可重新生成这些信息）。</li>
</ol>
<h3 id="3、下载链接："><a href="#3、下载链接：" class="headerlink" title="3、下载链接："></a><strong>3、下载链接：</strong></h3><p>（注：主链接下载服务器位于中国境内的阿里云数据中心华南区，每月大约有 100 GB 的下载流量，超量后会停止提供下载服务；备用链接下载服务器位于美国境内，为私有云，流量充足）</p>
<p>SecureCRT 8.0.0（ build 1063 ）for Windows ：<a href="http://ccie.oss-cn-shenzhen.aliyuncs.com/SecureCRT/SecureCRT_8.0.0.7z" target="_blank" rel="noopener">SecureCRT_8.0.0.7z</a>（<a href="http://pan.baidu.com/s/1hs0rQ88" target="_blank" rel="noopener">百度云盘</a>，<a href="https://pan.ccie.lol:44944/file/SecureCRT/SecureCRT_8.0.0.7z" target="_blank" rel="noopener">备用链接</a>）<br>SecureCRT 7.3.4 for Windows ：<a href="http://ccie.oss-cn-shenzhen.aliyuncs.com/SecureCRT/SecureCRT_7.3.4.7z" target="_blank" rel="noopener">SecureCRT_7.3.4.7z</a>（<a href="http://pan.baidu.com/s/1mhNAdeC" target="_blank" rel="noopener">百度云盘</a>，<a href="https://pan.ccie.lol:44944/file/SecureCRT/SecureCRT_7.3.4.7z" target="_blank" rel="noopener">备用链接</a>）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">md5sum ：</span><br><span class="line"></span><br><span class="line">1f1d6c12830ccc1915b37840c4a3de58 SecureCRT_7.3.4.7z</span><br><span class="line">e8cade759ada7112a18c7291c951444e SecureCRT_8.0.0.7z</span><br></pre></td></tr></table></figure>

<p>设置密码记录按钮<br>view-&gt; button bar </p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-b27bc56d4c40c27b.png" alt="view"><br><img src="http://upload-images.jianshu.io/upload_images/2790249-187b0dedc13f004e.png" alt=" button bar 勾选上（会显示在操作界面底部）"><br><img src="http://upload-images.jianshu.io/upload_images/2790249-0b62dcf738fe38da.png" alt="按此图配置"><br>每次输入固定密码的时候可以点击即完毕，非常方便</p>
]]></content>
      <categories>
        <category>Tools</category>
        <category>SecureCRT</category>
        <category>windows</category>
      </categories>
      <tags>
        <tag>SecureCRT</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>ESLint+Prettier+ husky + stylelint +lint-staged代码规范实践</title>
    <url>/2021/02/03/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="Prettier、-ESLint-、stylelint、husky-、lint-staged基本知识"><a href="#Prettier、-ESLint-、stylelint、husky-、lint-staged基本知识" class="headerlink" title="Prettier、 ESLint 、stylelint、husky 、lint-staged基本知识"></a>Prettier、 ESLint 、stylelint、husky 、lint-staged基本知识</h1><p><strong><a href="https://prettier.io/docs/en/install.html" target="_blank" rel="noopener">Prettier</a> ：</strong> 代码格式化<code>例如超过设置的行代码长度换行处理，结尾不使用分号，统一使用单引号</code></p>
<blockquote>
<p><code>prettier</code> 就是把你的代码转化成一个抽象语法树 <code>AST</code> 然后根据 <code>AST</code> 将代码按照 <code>prettier</code> 的风格输出即可。可以用 <code>prettier</code> 官方提供的<a href="https://prettier.io/playground/" target="_blank" rel="noopener" title="检测网站">检测网站</a>来看 <code>prettier</code> 的转化过程。</p>
</blockquote>
<p><strong><a href="https://eslint.org/docs/user-guide/getting-started" target="_blank" rel="noopener">Eslint</a>：</strong> 代码质量的校验。<code>例如使用了未定义的变量、三等号、api语法错误、修改const变量等等</code></p>
<ul>
<li>命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">检查 eslint src&#x2F;**&#x2F;*.&#123;js,ts,tsx&#125;</span><br><span class="line">自动修复 eslint --fix src&#x2F;**&#x2F;*.&#123;js,ts,tsx&#125;</span><br></pre></td></tr></table></figure></li>
<li><a href="https://github.com/standard/eslint-config-standard" target="_blank" rel="noopener">eslint-config-standard</a>配置包扩展社区中流行的最佳实践的风格指南。</li>
<li><a href="https://github.com/prettier/eslint-config-prettier" target="_blank" rel="noopener"><code>eslint-config-prettier</code></a> 关闭 Eslint 中与 Prettier 冲突的选项，只会关闭冲突的选项，不会启用Prettier的规则</li>
<li><a href="https://github.com/prettier/eslint-plugin-prettier" target="_blank" rel="noopener"><code>eslint-plugin-prettier</code></a> 先使用Prettier对代码进行格式化，再并对不一致的地方进行标记</li>
</ul>
<p><strong><a href="https://stylelint.docschina.org/user-guide/rules/" target="_blank" rel="noopener">stylelint</a>：</strong> stylelint 是一个强大和现代的 CSS 审查工具，有助于开发者推行统一的代码规范，避免样式错误<code>stylelint拥有超过150条的规则，包括捕捉错误、最佳实践、控制可以使用的语言特性和强制代码风格规范。</code>。stylelint 由 PostCSS 提供技术支持，所以它也可以理解 PostCSS 解析的语法，比如 SCSS。<br>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stylelint --fix src&#x2F;**&#x2F;*.&#123;html,css,scss&#125;</span><br></pre></td></tr></table></figure>
<p>插件：</p>
<ul>
<li><a href="https://github.com/prettier/stylelint-config-prettier" target="_blank" rel="noopener"><code>stylelint-config-prettier</code></a>：禁用所有与格式相关的 Stylelint 规则，解决 prettier 与 stylelint 规则冲突，确保将其放在 extends 队列最后，这样它将覆盖其他配置。</li>
<li><a href="https://github.com/AndyOGo/stylelint-declaration-strict-value" target="_blank" rel="noopener"><code>stylelint-config-standard</code></a>：官网提供的 css 标准</li>
<li><a href="https://github.com/sh-waqar/stylelint-declaration-use-variable" target="_blank" rel="noopener"><code>stylelint-prettier</code></a>：基于 prettier 代码风格的 stylelint 规则</li>
<li><a href="https://github.com/stormwarning/stylelint-config-recess-order" target="_blank" rel="noopener">stylelint-config-recess-order：</a> 属性排列顺序</li>
</ul>
<p><strong><a href="http://editorconfig.org" target="_blank" rel="noopener">EditorConfig</a>：</strong> 生成 .editorconfig 配置文件，规定当前编辑器的一些设定。抹平编辑器的差异。<code>格式化的生效策略：自定义配置&gt;editorconfig&gt;编辑器的setting</code></p>
<p><strong><a href="https://github.com/typicode/husky" target="_blank" rel="noopener">husky</a> ：</strong> git 操作的钩子。</p>
<p><strong><a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener">lint-staged</a> ：</strong> 只对 git 中staged（变更）的文件进行代码格式的校验和代码质量的校验操作。而不是项目中所有的文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;报错 在lint-staged命令中移除git add 命令本身自带git add</span><br><span class="line"></span><br><span class="line">‼ Some of your tasks use &#96;git add&#96; command. Please remove it from the config since all modifications made by tasks will be automatically added to the git commit index.</span><br></pre></td></tr></table></figure>
<h1 id="ESLint和Prettier区别"><a href="#ESLint和Prettier区别" class="headerlink" title="ESLint和Prettier区别"></a>ESLint和Prettier区别</h1><p>1、ESLint 主要包含代码格式的校验，代码质量的校验，ESLint 在出<code>--fix</code>自动修复功能前只会提示一些warning和error，改起来非常复杂。<br>2、Prettier 只是格式化代码 。<br>*<em>tips：如果你觉得的eslint自带的修复功能就足够的话可以不加Prettier *</em></p>
<h1 id="ESLint-Prettier-husky-stylelint-lint-staged-提高前端项目质量"><a href="#ESLint-Prettier-husky-stylelint-lint-staged-提高前端项目质量" class="headerlink" title="ESLint+Prettier+ husky + stylelint +lint-staged 提高前端项目质量"></a>ESLint+Prettier+ husky + stylelint +lint-staged 提高前端项目质量</h1><blockquote>
<p>通过pre-commit阶段增量校验的模式，尽量避免对老旧代码的影响；稳健地逐步完善老项目的强制校验和格式化提高前端项目质量、统一项目代码风格</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add husky lint-staged prettier eslint-plugin-prettier eslint-config-prettier stylelint stylelint-config-prettier stylelint-config-standard stylelint-prettier -D</span><br></pre></td></tr></table></figure>
<p>我在项目中的配置可能不是很完美，有问题可以提出来<br>.eslintrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;env&quot;: &#123;</span><br><span class="line">        &quot;amd&quot;: true,</span><br><span class="line">        &quot;browser&quot;: true,</span><br><span class="line">        &quot;node&quot;: true,</span><br><span class="line">        &quot;es6&quot;: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;extends&quot;: [</span><br><span class="line">        &quot;react-app&quot;,</span><br><span class="line">        &quot;plugin:prettier&#x2F;recommended&quot;,</span><br><span class="line">        &quot;prettier&#x2F;react&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;plugins&quot;: [</span><br><span class="line">        &quot;prettier&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;parser&quot;: &quot;babel-eslint&quot;,</span><br><span class="line">    &quot;rules&quot;: &#123;</span><br><span class="line">        &quot;prettier&#x2F;prettier&quot;: &quot;error&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.stylelintrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;defaultSeverity&quot;: &quot;error&quot;,</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;stylelint-config-recommended&quot;,</span><br><span class="line">    &quot;stylelint-config-standard&quot;,</span><br><span class="line">    &quot;stylelint-prettier&#x2F;recommended&quot;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;rules&quot;:  &#123;</span><br><span class="line">    &quot;selector-pseudo-class-no-unknown&quot;: [true, &#123;</span><br><span class="line">      ignorePseudoClasses: [&quot;global&quot;]</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;length-zero-no-unit&quot;: null,</span><br><span class="line">    &quot;indentation&quot;: 2,</span><br><span class="line">    &quot;max-empty-lines&quot;: 1,</span><br><span class="line">    &quot;block-no-empty&quot;: true,</span><br><span class="line">    &quot;block-opening-brace-newline-after&quot;: &quot;always-multi-line&quot;,</span><br><span class="line">    &quot;block-opening-brace-space-after&quot;: &quot;always-single-line&quot;,</span><br><span class="line">    &quot;block-opening-brace-space-before&quot;: &quot;always&quot;,</span><br><span class="line">    &quot;block-closing-brace-empty-line-before&quot;: &quot;never&quot;,</span><br><span class="line">    &quot;declaration-empty-line-before&quot;: &quot;never&quot;,</span><br><span class="line">    &quot;declaration-block-no-duplicate-properties&quot;: true,</span><br><span class="line">    &quot;declaration-block-no-redundant-longhand-properties&quot;: true,</span><br><span class="line">    &quot;shorthand-property-no-redundant-values&quot;: true,</span><br><span class="line">    &quot;no-empty-source&quot;: true,</span><br><span class="line">    &quot;no-eol-whitespace&quot;: true,</span><br><span class="line">    &quot;no-extra-semicolons&quot;: true,</span><br><span class="line">    &quot;no-invalid-double-slash-comments&quot;: true,</span><br><span class="line">    &quot;no-missing-end-of-source-newline&quot;: true,</span><br><span class="line">    &quot;at-rule-no-unknown&quot;: null,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.editorconfig</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;editorconfig.org</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2 # 用两个空格代替制表符；</span><br><span class="line">end_of_line &#x3D; lf # win用cr lf，linux&#x2F;unix用lf，mac用cr。统一window和mac</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true# 在保存时删除尾部的空白字符；</span><br><span class="line">insert_final_newline &#x3D; true# 在文件结尾添加一个空白行；</span><br><span class="line">max_line_length &#x3D; 160# 每行代码最大宽度 160</span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br></pre></td></tr></table></figure>
<p>package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;xxx_front&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.1.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;antd-mobile&quot;: &quot;^2.3.1&quot;,</span><br><span class="line">    &quot;axios&quot;: &quot;^0.19.0&quot;,</span><br><span class="line">    &quot;babel-plugin-import&quot;: &quot;^1.12.2&quot;,</span><br><span class="line">    &quot;babel-plugin-syntax-dynamic-import&quot;: &quot;^6.18.0&quot;,</span><br><span class="line">    &quot;chart.js&quot;: &quot;^2.9.4&quot;,</span><br><span class="line">    &quot;copy-to-clipboard&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">    &quot;crypto-js&quot;: &quot;^3.1.9-1&quot;,</span><br><span class="line">    &quot;customize-cra&quot;: &quot;^0.8.0&quot;,</span><br><span class="line">    &quot;http-proxy-middleware&quot;: &quot;^0.20.0&quot;,</span><br><span class="line">    &quot;js-cookie&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;less&quot;: &quot;^3.10.3&quot;,</span><br><span class="line">    &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">    &quot;node-sass&quot;: &quot;^4.14.1&quot;,</span><br><span class="line">    &quot;qs&quot;: &quot;^6.9.0&quot;,</span><br><span class="line">    &quot;react&quot;: &quot;^16.11.0&quot;,</span><br><span class="line">    &quot;react-app-rewired&quot;: &quot;^2.1.4&quot;,</span><br><span class="line">    &quot;react-document-title&quot;: &quot;^2.0.3&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^16.11.0&quot;,</span><br><span class="line">    &quot;react-loadable&quot;: &quot;^5.5.0&quot;,</span><br><span class="line">    &quot;react-redux&quot;: &quot;^7.1.1&quot;,</span><br><span class="line">    &quot;react-router&quot;: &quot;^5.1.2&quot;,</span><br><span class="line">    &quot;react-router-dom&quot;: &quot;^5.1.2&quot;,</span><br><span class="line">    &quot;react-scripts&quot;: &quot;3.2.0&quot;,</span><br><span class="line">    &quot;react-sticky&quot;: &quot;^6.0.3&quot;,</span><br><span class="line">    &quot;redux&quot;: &quot;^4.0.4&quot;,</span><br><span class="line">    &quot;redux-thunk&quot;: &quot;^2.3.0&quot;,</span><br><span class="line">    &quot;url-parse&quot;: &quot;^1.4.7&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;4.41.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot; react-app-rewired start&quot;,</span><br><span class="line">    &quot;build:analyze&quot;: &quot;set REACT_APP_BUILD_ENV&#x3D;production &amp;&amp; react-app-rewired build  --analyze&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;eslint src&#x2F;**&#x2F;*.&#123;js,ts,tsx&#125;&quot;,</span><br><span class="line">    &quot;fix&quot;: &quot;prettier --write src&#x2F;**&#x2F;*.&#123;js,ts,tsx&#125;&quot;,</span><br><span class="line">    &quot;lint:style&quot;: &quot;stylelint --fix src&#x2F;**&#x2F;*.&#123;html,css,scss&#125;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;husky&quot;: &#123;</span><br><span class="line">    &quot;hooks&quot;: &#123;</span><br><span class="line">      &quot;pre-commit&quot;: &quot;lint-staged&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;lint-staged&quot;: &#123;</span><br><span class="line">    &quot;src&#x2F;**&#x2F;*.&#123;css,scss&#125;&quot;: [</span><br><span class="line">      &quot;stylelint --fix&quot;,</span><br><span class="line">      &quot;prettier --write&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;src&#x2F;**&#x2F;*.&#123;js,ts,tsx&#125;&quot;: [</span><br><span class="line">      &quot;eslint --fix&quot;,</span><br><span class="line">      &quot;prettier --write&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;browserslist&quot;: &#123;</span><br><span class="line">    &quot;production&quot;: [</span><br><span class="line">      &quot;&gt; 1%&quot;,</span><br><span class="line">      &quot;last 5 versions&quot;,</span><br><span class="line">      &quot;IOS &gt; 8&quot;,</span><br><span class="line">      &quot;Android &gt; 4.6&quot;,</span><br><span class="line">      &quot;UCAndroid &gt;&#x3D; 9&quot;,</span><br><span class="line">      &quot;QQAndroid &gt;&#x3D; 8.2&quot;,</span><br><span class="line">      &quot;not dead&quot;,</span><br><span class="line">      &quot;not ie &lt;&#x3D; 11&quot;,</span><br><span class="line">      &quot;not op_mini all&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;development&quot;: [</span><br><span class="line">      &quot;last 1 chrome version&quot;,</span><br><span class="line">      &quot;last 1 firefox version&quot;,</span><br><span class="line">      &quot;last 1 safari version&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;eslint-config-prettier&quot;: &quot;^7.2.0&quot;,</span><br><span class="line">    &quot;eslint-plugin-prettier&quot;: &quot;^3.3.1&quot;,</span><br><span class="line">    &quot;husky&quot;: &quot;^4.3.8&quot;,</span><br><span class="line">    &quot;lint-staged&quot;: &quot;^10.5.3&quot;,</span><br><span class="line">    &quot;prettier&quot;: &quot;^2.2.1&quot;,</span><br><span class="line">    &quot;stylelint&quot;: &quot;^13.9.0&quot;,</span><br><span class="line">    &quot;stylelint-config-prettier&quot;: &quot;^8.0.2&quot;,</span><br><span class="line">    &quot;stylelint-config-standard&quot;: &quot;^20.0.0&quot;,</span><br><span class="line">    &quot;stylelint-prettier&quot;: &quot;^1.1.2&quot;,</span><br><span class="line">    &quot;webpack-bundle-analyzer&quot;: &quot;^4.3.0&quot;,</span><br><span class="line">    &quot;webpack-cli&quot;: &quot;^3.3.10&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提交commit之后</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-b35ab09d3d53e470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="校验成功"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-591cb2019cd36e2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="校验失败"></p>
<h3 id="vscode插件推荐。"><a href="#vscode插件推荐。" class="headerlink" title="vscode插件推荐。"></a>vscode插件推荐。</h3><p>EditorConfig：生成 .editorconfig 配置文件，规定当前编辑器的一些设定。<br>ESLint：代码质量检查。<br>styleLint：css代码质量检查。<br>Prettier：格式化代码<br>Code Spell Checker：单词拼写检查。<br>Indent-Rainbow：彩虹缩进，缩进不规范时会标红提示。</p>
<p>vscode 的 setting.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;workbench.colorTheme&quot;: &quot;Dracula Soft&quot;,</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,&#x2F;&#x2F;保存时使用VSCode 自身格式化程序格式化</span><br><span class="line">  &quot;javascript.format.enable&quot;: false,&#x2F;&#x2F;关闭编辑器对 js 文件的格式化，交给 ESLint 来做格式化，否则会格式化两次，解决editor.formatOnSave的兼容问题</span><br><span class="line">  &quot;editor.codeActionsOnSave&quot;: &#123;</span><br><span class="line">    &quot;source.fixAll&quot;: true,</span><br><span class="line">    &#x2F;&#x2F; For ESLint</span><br><span class="line">    &quot;source.fixAll.eslint&quot;: true,</span><br><span class="line">    &#x2F;&#x2F; For TSLint</span><br><span class="line">    &quot;source.fixAll.tslint&quot;: true,</span><br><span class="line">    &#x2F;&#x2F; For Stylelint</span><br><span class="line">    &quot;source.fixAll.stylelint&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;eslint.probe&quot;: [</span><br><span class="line">    &quot;javascript&quot;,</span><br><span class="line">    &quot;javascriptreact&quot;,</span><br><span class="line">    &quot;typescript&quot;,</span><br><span class="line">    &quot;typescriptreact&quot;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>team-norm团队规范</category>
        <category>code-norm代码规范</category>
      </categories>
      <tags>
        <tag>Prettier</tag>
        <tag>husky</tag>
        <tag>stylelint</tag>
        <tag>lint-staged</tag>
      </tags>
  </entry>
  <entry>
    <title>代码格式化工具prettier</title>
    <url>/2021/02/03/prettier/</url>
    <content><![CDATA[<blockquote>
<p>prettier是一款强势武断的代码格式化工具，它几乎移除了编辑器本身所有的对代码的操作格式，然后重新显示。就是为了让所有用这套规则的人有完全相同的代码。在团队协作开发的时候更是体现出它的优势。与eslint，tslint等各种格式化工具不同的是，prettier只关心代码格式化，而不关心语法问题。</p>
</blockquote>
<h1 id="编辑器使用prettier"><a href="#编辑器使用prettier" class="headerlink" title="编辑器使用prettier"></a>编辑器使用prettier</h1><h1 id="脚本使用prettier"><a href="#脚本使用prettier" class="headerlink" title="脚本使用prettier"></a>脚本使用prettier</h1><p>安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add prettier -D</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">prettier--write &lt;文件路径+文件名&gt;</span><br><span class="line">例如</span><br><span class="line">prettier --write src&#x2F;**&#x2F;*.&#123;js,ts,tsx&#125;</span><br></pre></td></tr></table></figure>
<p>自定义配置规则方式</p>
<ul>
<li>.prettierrc 文件，支持yaml和json格式；或者加上 .yaml/.yml/.json 后缀名<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;printWidth&quot;: 160,  &#x2F;&#x2F;超过160字符换行       </span><br><span class="line">    &quot;semi&quot;: false,                    </span><br><span class="line">    &quot;singleQuote&quot;: true,             </span><br><span class="line">    &quot;trailingComma&quot;: &quot;es5&quot;,          </span><br><span class="line">    &quot;bracketSpacing&quot;: true,          </span><br><span class="line">    &quot;jsxBracketSameLine&quot;: false,     </span><br><span class="line">    &quot;arrowParens&quot;: &quot;avoid&quot;,          </span><br><span class="line">    &quot;requirePragma&quot;: false,            </span><br><span class="line">    &quot;useTabs&quot;: false,</span><br><span class="line">    &quot;htmlWhitespaceSensitivity&quot;: &quot;css&quot;&#x2F;&#x2F;内联标签与块级标签格式化有区别</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>.prettierrc.toml 文件（当为toml格式的时候，后缀是必须的）</li>
<li>prettier.config.js 或者 .prettierrc.js，需要返回一个对象</li>
<li>package.json文件中加上”prettier”属性</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1、.prettierrc 的优先级高于在vscode全局配置settings.json中格式化配置的优先级<br>2、 编辑器配置适合个人开发、脚本配置适合团队开发</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>Prettier</category>
      </categories>
      <tags>
        <tag>Prettier</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript、vue中控制滚动条位置（以及安卓手机中遇到的坑）</title>
    <url>/2020/04/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%8E%A7%E5%88%B6%E6%BB%9A%E5%8A%A8%E6%9D%A1/</url>
    <content><![CDATA[<p>最近做了一个需求的，其中有一个效果是点击按钮将表单滚动到可视区域，这本来是很常见的效果。我们有很多种方案去实现。<br><strong>一、 scrollTo、scroll or scrollBy</strong><br><img src="http://upload-images.jianshu.io/upload_images/2790249-202b5bc8de7957ea.png" alt="image.png"><br>这显示不支持safari on ios ，但是我的手机版本是13.3.1的safari可以运行没有问题，但是安卓手机完全无效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.scrollTo(&#123;</span><br><span class="line">    top: 1000,</span><br><span class="line">    left: 100,</span><br><span class="line">    behavior: &#39;smooth&#39;</span><br><span class="line">&#125;);</span><br><span class="line">document.body.scrollTo(&#123;</span><br><span class="line">    top: 1000,</span><br><span class="line">    behavior: &#39;smooth&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>vue中可以根据ref来操作dom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$refs.xxx.$el.scrollTo(&#123;</span><br><span class="line">       top: 1000,</span><br><span class="line">       behavior: &#39;smooth&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.scroll(&#123;</span><br><span class="line">  top: 100,</span><br><span class="line">  left: 100,</span><br><span class="line">  behavior: &#39;smooth&#39;</span><br><span class="line">&#125;);</span><br><span class="line">document.body.scrollBy(0, 1000);</span><br></pre></td></tr></table></figure>
<p><strong>二、scrollTop 获取当前页面的滚动条纵坐标位置去改变其值</strong></p>
<blockquote>
<ul>
<li>对于没有doctype声明的页面里可以使用 document.body.scrollTop 来获取 scrollTop高度 ；</li>
<li>对于有doctype声明的页面则可以使用 document.documentElement.scrollTop； Safari</li>
<li>safari 比较特别，有自己获取scrollTop的函数 ： window.pageYOffset ； Firefox</li>
<li>火狐等等相对标准些的浏览器就省心多了，直接用 document.documentElement.scrollTop ；</li>
</ul>
</blockquote>
<p>浏览器和ios都可以生效，但是安卓手机手机完全无效果，测试了一下，安卓手机设置完scrollTop再去console出scrollTop的值，发现并没有赋值成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">document.body.scrollTop &#x3D; document.documentElement.scrollTop &#x3D; window.pageYOffset &#x3D; 1000;</span><br></pre></td></tr></table></figure>
<p><strong>三、scrollIntoView 与 scrollIntoViewIfNeeded API</strong> （安卓、ios手机支持，浏览器测试结果看来也没问题）<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView" target="_blank" rel="noopener">Element.scrollIntoView()</a>方法让当前的元素滚动到浏览器窗口的可视区域内。<code>这是一个实验中的功能</code><br><img src="http://upload-images.jianshu.io/upload_images/2790249-59550f82ab6e38df.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">element.scrollIntoView(true);</span><br><span class="line">或者</span><br><span class="line">element.scrollIntoView(&#123;behavior: &quot;instant&quot;, block: &quot;start&quot;, inline: &quot;nearest&quot;&#125;);</span><br><span class="line">vue中</span><br><span class="line">this.$refs.xxxx.$el.scrollIntoView();</span><br></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoViewIfNeeded" target="_blank" rel="noopener">Element. scrollIntoViewIfNeeded()</a><br> 如果该元素已经在浏览器窗口的可见区域内，则不会发生滚动。 此方法是标准的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView" target="_blank" rel="noopener">Element.scrollIntoView()</a>方法的专有变体。<code>非标准
该特性是非标准的，请尽量不要在生产环境中使用它！</code><br><img src="http://upload-images.jianshu.io/upload_images/2790249-2da34c6761ebc8d1.png" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">element. scrollIntoViewIfNeeded(true);</span><br></pre></td></tr></table></figure>
<p>vue中根据ref来操作dom</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$refs.xxxx.$el. scrollIntoViewIfNeeded();</span><br></pre></td></tr></table></figure>

<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/pageYOffset" target="_blank" rel="noopener">Window.pageYOffset</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2790249-781c331bdbd5cb9a.png" alt="image.png"></p>
<p><strong>监听，取消监听滚动事件</strong><br><code>注意scroll监听的匿名事件是不可以取消监听事件的，我想要的是页面中所有需要曝光的地方曝光结束后，取消监听事件</code><br>可以参照<a href="https://sailormillet.github.io/2019/12/31/%E5%9F%8B%E7%82%B9%E4%B9%8B%E7%9C%BC%E7%90%83%E6%9B%9D%E5%85%89/">埋点之眼球曝光</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">window.addEventListener(&#39;scroll&#39;, this.handleScroll);</span><br><span class="line">window.removeEventListener(&#39;scroll&#39;, this.handleScroll);</span><br><span class="line">const handleScroll &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(111111)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>JavaScript、vue、android</tag>
      </tags>
  </entry>
  <entry>
    <title>Rollup.js | 解决打包react项目报错</title>
    <url>/2021/02/03/RollupJs%20%E8%A7%A3%E5%86%B3%E6%89%93%E5%8C%85react%E9%A1%B9%E7%9B%AE%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>报错信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">react.development.js:12 Uncaught ReferenceError: process is not defined</span><br><span class="line">    at react.development.js:12</span><br><span class="line">    at createCommonjsModule (bundle.js:6)</span><br><span class="line">    at react.production.min.js:23</span><br><span class="line">    at index.js:10</span><br></pre></td></tr></table></figure>
<p>process对象是nodejs的环境变量，浏览器端是没有的。<br>解决办法，在打包后的bundle.js里var一个process对象，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var process &#x3D; &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    NODE_ENV: &#39;production&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是每次重新构建bundle.js后，又要重新添加，所以可以在rollup.config.js里配置，</p>
<p>例如： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import resolve from &#39;rollup-plugin-node-resolve&#39;</span><br><span class="line">import commonjs from &#39;rollup-plugin-commonjs&#39;</span><br><span class="line"> </span><br><span class="line">const Global &#x3D; &#96;var process &#x3D; &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    NODE_ENV: &#39;production&#39;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#96;</span><br><span class="line"> </span><br><span class="line">export default &#123;</span><br><span class="line">    input: pathResolve(&#39;src&#x2F;index.js&#39;),</span><br><span class="line">  output: &#123;</span><br><span class="line">     name: &#39;bundle&#39;,</span><br><span class="line">        file: pathResolve(&quot;dist&#x2F;js&#x2F;bundle.js&quot;),</span><br><span class="line">        format: &#39;iife&#39;,&#x2F;&#x2F;immediately-invoked function expression — suitable for &lt;script&gt; tags</span><br><span class="line">        sourcemap: true,</span><br><span class="line">    banner: Global&#x2F;&#x2F;output.banner属性的作用是在打包后的文件顶部添加值。</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [resolve(), commonjs()]</span><br></pre></td></tr></table></figure>
<p>或者rollup.config.js配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import replace from &quot;@rollup&#x2F;plugin-replace&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    input: pathResolve(&#39;src&#x2F;index.js&#39;),</span><br><span class="line">    output: &#123;</span><br><span class="line">        name: &#39;bundle&#39;,</span><br><span class="line">        file: pathResolve(&quot;dist&#x2F;js&#x2F;bundle.js&quot;),</span><br><span class="line">        format: &#39;iife&#39;,&#x2F;&#x2F;immediately-invoked function expression — suitable for &lt;script&gt; tags</span><br><span class="line">        sourcemap: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        resolve(), &#x2F;&#x2F; tells Rollup how to find date-fns in node_modules</span><br><span class="line"></span><br><span class="line">        babel(&#123;</span><br><span class="line">            babelHelpers: &quot;bundled&quot;,</span><br><span class="line">            exclude: &quot;**&#x2F;node_modules&#x2F;**&quot;,</span><br><span class="line">        &#125;),</span><br><span class="line">        commonjs(), &#x2F;&#x2F; converts date-fns to ES modules</span><br><span class="line">         replace(&#123;</span><br><span class="line">             &quot;process.env.NODE_ENV&quot;: JSON.stringify(&quot;development&quot;),</span><br><span class="line">         &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>RollupJS</category>
      </categories>
      <tags>
        <tag>RollupJS</tag>
      </tags>
  </entry>
  <entry>
    <title>Rollup.js | 解决打包react项目报错</title>
    <url>/2021/02/03/rollupJs%E5%BC%80%E5%8F%91react%E7%BB%84%E4%BB%B6%E5%B9%B6%E4%B8%94%E5%8F%91npm/</url>
    <content><![CDATA[<blockquote>
<p>最近写了一个九宫格抽奖的一个react的组件，想着写都写完了，顺便在回顾下rollup打包一个组件，并且来发布出来。主要就用到了react 和rollup。rollup 适合打包 js 库，不适合打包 css，如果想制作 基于 react 和antd 的组件首选 webpack</p>
</blockquote>
<h2 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir lottery-react</span><br><span class="line">cd lottery-react</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure>
<p>我的package.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;lottery-react&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.2&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;lottery-react&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;lib&#x2F;index.js&quot;,</span><br><span class="line">  &quot;module&quot;: &quot;es&#x2F;index.js&quot;,</span><br><span class="line">  &quot;unpkg&quot;: &quot;dist&#x2F;lottery.min.js&quot;,</span><br><span class="line">  &quot;files&quot;: [</span><br><span class="line">    &quot;dist&quot;,</span><br><span class="line">    &quot;lib&quot;,</span><br><span class="line">    &quot;es&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;sideEffects&quot;: [</span><br><span class="line">    &quot;dist&#x2F;*&quot;,</span><br><span class="line">    &quot;es&#x2F;**&#x2F;style&#x2F;*&quot;,</span><br><span class="line">    &quot;lib&#x2F;**&#x2F;style&#x2F;*&quot;,</span><br><span class="line">    &quot;*.scss&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;clean&quot;: &quot;rimraf lib es dist&quot;,</span><br><span class="line">    &quot;build:cjs&quot;: &quot;babel src --out-dir lib&quot;,</span><br><span class="line">    &quot;build:es&quot;: &quot;cross-env BABEL_ENV&#x3D;jsnext babel src --out-dir es&quot;,</span><br><span class="line">    &quot;build:umd&quot;: &quot;cross-env BABEL_ENV&#x3D;rollup NODE_ENV&#x3D;development rollup -c -f umd -o dist&#x2F;lottery.js&quot;,</span><br><span class="line">    &quot;build:umd:min&quot;: &quot;cross-env BABEL_ENV&#x3D;rollup NODE_ENV&#x3D;production rollup -c -f umd -o dist&#x2F;lottery.min.js&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;npm run clean &amp;&amp; npm run build:cjs &amp;&amp; npm run build:es &amp;&amp; npm run build:umd &amp;&amp; npm run build:umd:min&quot;,</span><br><span class="line">    &quot;build:cjs2&quot;: &quot;cross-env BABEL_ENV&#x3D;rollup NODE_ENV&#x3D;development rollup -c -f umd -o lib&#x2F;index.js&quot;,</span><br><span class="line">    &quot;build:es2&quot;: &quot;cross-env BABEL_ENV&#x3D;rollup NODE_ENV&#x3D;development rollup -c -f umd -o es&#x2F;index.js&quot;,</span><br><span class="line">    &quot;build:all&quot;: &quot;npm run clean &amp;&amp; npm run build:cjs2 &amp;&amp; npm run build:es2 &amp;&amp; npm run build:umd &amp;&amp; npm run build:umd:min&quot;,</span><br><span class="line">    &quot;examples&quot;: &quot;npm-run-all --parallel examples:watch examples:start&quot;,</span><br><span class="line">    &quot;examples:clean&quot;: &quot;rimraf example&#x2F;dist&quot;,</span><br><span class="line">    &quot;examples:start&quot;: &quot;serve example&#x2F;dist&quot;,</span><br><span class="line">    &quot;examples:watch&quot;: &quot;rollup -c example&#x2F;rollup.config.js -w&quot;,</span><br><span class="line">    &quot;examples:build&quot;: &quot;rollup -c example&#x2F;rollup.config.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;repository&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;git&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;git+https:&#x2F;&#x2F;github.com&#x2F;sailormillet&#x2F;lottery-react.git&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [</span><br><span class="line">    &quot;Lottery&quot;,</span><br><span class="line">    &quot;lucky draw&quot;,</span><br><span class="line">    &quot;lotto&quot;,</span><br><span class="line">    &quot;sweepstake&quot;,</span><br><span class="line">    &quot;react&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;author&quot;: &quot;Amy&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;bugs&quot;: &#123;</span><br><span class="line">    &quot;url&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;sailormillet&#x2F;lottery-react&#x2F;issues&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;homepage&quot;: &quot;https:&#x2F;&#x2F;github.com&#x2F;sailormillet&#x2F;lottery-react#readme&quot;,</span><br><span class="line">  &quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;react&quot;: &quot;^0.14.0 || ^15.0.0 || ^16.0.0 || ^17.0.0&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^0.14.0 || ^15.0.0 || ^16.0.0 || ^17.0.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;@babel&#x2F;cli&quot;: &quot;^7.12.10&quot;,</span><br><span class="line">    &quot;@babel&#x2F;core&quot;: &quot;^7.12.10&quot;,</span><br><span class="line">    &quot;@babel&#x2F;plugin-proposal-class-properties&quot;: &quot;^7.12.1&quot;,</span><br><span class="line">    &quot;@babel&#x2F;preset-env&quot;: &quot;^7.12.11&quot;,</span><br><span class="line">    &quot;@babel&#x2F;preset-react&quot;: &quot;^7.12.10&quot;,</span><br><span class="line">    &quot;@rollup&#x2F;plugin-alias&quot;: &quot;^3.1.1&quot;,</span><br><span class="line">    &quot;@rollup&#x2F;plugin-babel&quot;: &quot;^5.2.2&quot;,</span><br><span class="line">    &quot;@rollup&#x2F;plugin-commonjs&quot;: &quot;^17.0.0&quot;,</span><br><span class="line">    &quot;@rollup&#x2F;plugin-node-resolve&quot;: &quot;^11.1.0&quot;,</span><br><span class="line">    &quot;@rollup&#x2F;plugin-replace&quot;: &quot;^2.3.4&quot;,</span><br><span class="line">    &quot;cross-env&quot;: &quot;^7.0.3&quot;,</span><br><span class="line">    &quot;fs&quot;: &quot;^0.0.1-security&quot;,</span><br><span class="line">    &quot;npm-run-all&quot;: &quot;^4.1.5&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;^0.12.7&quot;,</span><br><span class="line">    &quot;postcss&quot;: &quot;^8.2.4&quot;,</span><br><span class="line">    &quot;postcss-cssnext&quot;: &quot;^3.1.0&quot;,</span><br><span class="line">    &quot;postcss-nested&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">    &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">    &quot;react&quot;: &quot;^17.0.1&quot;,</span><br><span class="line">    &quot;react-dom&quot;: &quot;^17.0.1&quot;,</span><br><span class="line">    &quot;rollup&quot;: &quot;^2.36.1&quot;,</span><br><span class="line">    &quot;rollup-plugin-generate-html-template&quot;: &quot;^1.7.0&quot;,</span><br><span class="line">    &quot;rollup-plugin-includepaths&quot;: &quot;^0.2.4&quot;,</span><br><span class="line">    &quot;rollup-plugin-postcss&quot;: &quot;^4.0.0&quot;,</span><br><span class="line">    &quot;rollup-plugin-scss&quot;: &quot;^2.6.1&quot;,</span><br><span class="line">    &quot;rollup-plugin-uglify&quot;: &quot;^6.0.4&quot;,</span><br><span class="line">    &quot;serve&quot;: &quot;^11.3.2&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="目录结构描述"><a href="#目录结构描述" class="headerlink" title="目录结构描述"></a>目录结构描述</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── dist                      </span><br><span class="line">├── es                      </span><br><span class="line">├── lib                      </span><br><span class="line">├── example     </span><br><span class="line">│   ├── dist              </span><br><span class="line">│   ├── src              </span><br><span class="line">│   │   ├── components          </span><br><span class="line">│   │   ├── index.html             </span><br><span class="line">│   │   └── index.js     </span><br><span class="line">│   ├── rollup.config.js                                    </span><br><span class="line">├── src                         </span><br><span class="line">│   ├── styles              </span><br><span class="line">│   │   └── index.scss          </span><br><span class="line">│   └── index.js                                </span><br><span class="line">├── README.md                   &#x2F;&#x2F; 开发文档</span><br><span class="line">├── .gitignore                  </span><br><span class="line">├── .babelrc                    &#x2F;&#x2F; babel配置                 </span><br><span class="line">├── .eslintrc                   &#x2F;&#x2F; ESLint 配置文件                    </span><br><span class="line">├── .editorconfig               &#x2F;&#x2F; IDE定义配置</span><br><span class="line">├── package.json                &#x2F;&#x2F; 模块描述文件</span><br><span class="line">├── rollup.config.js            &#x2F;&#x2F; 模块描述文件</span><br><span class="line">└── yarn.lock                   &#x2F;&#x2F; 依赖文件</span><br></pre></td></tr></table></figure>

<p>外层rollup.config.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import resolve from &#39;@rollup&#x2F;plugin-node-resolve&#39;;</span><br><span class="line">import babel from &#39;@rollup&#x2F;plugin-babel&#39;;</span><br><span class="line">import commonjs from &#39;@rollup&#x2F;plugin-commonjs&#39;;</span><br><span class="line">import &#123; uglify &#125; from &#39;rollup-plugin-uglify&#39;;</span><br><span class="line">import replace from &#39;@rollup&#x2F;plugin-replace&#39;;</span><br><span class="line">import postcss from &#39;rollup-plugin-postcss&#39;;</span><br><span class="line">const env &#x3D; process.env.NODE_ENV;</span><br><span class="line"></span><br><span class="line">const config &#x3D; &#123;</span><br><span class="line">    input: &#39;src&#x2F;index.js&#39;,</span><br><span class="line">    &#x2F;&#x2F;告诉rollup不要将此lodash打包，而作为外部依赖</span><br><span class="line">    external: [&quot;react&quot;],</span><br><span class="line">    &#x2F;&#x2F; 是否开启代码分割</span><br><span class="line">    experimentalCodeSplitting: true,</span><br><span class="line">    output: &#123;</span><br><span class="line">        &#x2F;&#x2F; dir: &quot;lib&quot;,</span><br><span class="line">        name: &#39;LuckDraw&#39;,</span><br><span class="line">        format: &#39;umd&#39;,</span><br><span class="line">        sourcemap: true,</span><br><span class="line">        globals: &#123;</span><br><span class="line">            react: &#39;React&#39;</span><br><span class="line">        &#125;,</span><br><span class="line">        exports: &#39;named&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        resolve(),</span><br><span class="line">        babel(&#123;</span><br><span class="line">            babelHelpers: &#39;bundled&#39;,</span><br><span class="line">            exclude: &#39;**&#x2F;node_modules&#x2F;**&#39;,</span><br><span class="line">        &#125;),</span><br><span class="line">        commonjs(),</span><br><span class="line">        postcss(&#123;</span><br><span class="line">            minimize: env &#x3D;&#x3D;&#x3D; &#39;production&#39;,</span><br><span class="line">            extract: true,</span><br><span class="line">            extensions: [&quot;scss&quot;, &quot;less&quot;, &quot;css&quot;],</span><br><span class="line">            &#x2F;&#x2F; plugins: [nested(), cssnext(&#123; warnForDuplicates: false &#125;), cssnano()],</span><br><span class="line">            &#x2F;&#x2F; extract: false &#x2F;&#x2F; 无论是 dev 还是其他环境这个配置项都不做 样式的抽离</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if (env &#x3D;&#x3D;&#x3D; &#39;production&#39;) &#123;</span><br><span class="line">    config.plugins.push(</span><br><span class="line">        uglify(&#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">                pure_getters: true,</span><br><span class="line">                unsafe: true,</span><br><span class="line">                unsafe_comps: true,</span><br><span class="line">            &#125;,</span><br><span class="line">            warnings: false</span><br><span class="line">        &#125;)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    config.plugins.push(</span><br><span class="line">        replace(&#123;</span><br><span class="line">            &#39;process.env.NODE_ENV&#39;: JSON.stringify(&#39;production&#39;)</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default config;</span><br></pre></td></tr></table></figure>
<p>src/index.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import React from &#39;react&#39;</span><br><span class="line">import &#39;.&#x2F;styles&#x2F;index.scss&#39;</span><br><span class="line">class LuckDraw extends React.PureComponent &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">        this.state &#x3D; &#123;</span><br><span class="line">            active_index: null,   &#x2F;&#x2F; 奖品是否被选中，选中时，值为奖品index, 例如0,1,2,3...</span><br><span class="line">            times: &#39;times&#39; in props ? props.times * 1 : 1, &#x2F;&#x2F; 抽奖次数</span><br><span class="line">            is_rolling: false,  &#x2F;&#x2F; 正在抽奖时，禁止重复点击</span><br><span class="line">            roll_map_list: [0, 1, 2, 7, 8, 3, 6, 5, 4],  &#x2F;&#x2F; 运动顺序，数据映射</span><br><span class="line">        &#125;;</span><br><span class="line">        this.lotteryTimer &#x3D; null;</span><br><span class="line">        this.current_index &#x3D; 0;</span><br><span class="line">        this.CYCLE_TIMES &#x3D; 0;</span><br><span class="line">        this.speed &#x3D; 50;</span><br><span class="line">    &#125;</span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        clearTimeout(this.lotteryTimer);</span><br><span class="line">        clearTimeout(this.callbacktimer)</span><br><span class="line">    &#125;</span><br><span class="line">    data_format(data) &#123;</span><br><span class="line">        if (data) &#123;</span><br><span class="line">            &#x2F;&#x2F; let gift_list &#x3D; data.slice(0, 8);</span><br><span class="line">            let gift_list &#x3D; data.slice(0);</span><br><span class="line">            gift_list.splice(gift_list.length &#x2F; 2, 0, &#123;</span><br><span class="line">                name: &quot;立即抽奖&quot;,</span><br><span class="line">                image: &quot;&quot;,</span><br><span class="line">                id: &quot;&quot;,</span><br><span class="line">                startBtn: true</span><br><span class="line">            &#125;)</span><br><span class="line">            return gift_list</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            console.error(&#39;未获取到奖品信息！&#39;);</span><br><span class="line">            return []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        const &#123; roll_map_list, times &#125; &#x3D; this.state;</span><br><span class="line">        const &#123; gift, giftList, speed &#x3D; 120, cycle_times &#x3D; 3 &#125; &#x3D; this.props</span><br><span class="line">        const gift_list &#x3D; this.data_format(giftList)</span><br><span class="line">        this.setState(</span><br><span class="line">            &#123;</span><br><span class="line">                active_index: this.current_index,</span><br><span class="line">            &#125;,</span><br><span class="line">            () &#x3D;&gt; &#123;</span><br><span class="line">                let act_item &#x3D; gift_list[roll_map_list.indexOf(this.current_index)] || &#123;&#125;</span><br><span class="line">                if (this.speed &gt; speed &amp;&amp; (act_item.id * 1 &#x3D;&#x3D;&#x3D; gift.id * 1)) &#123;</span><br><span class="line">                    clearTimeout(this.lotteryTimer);</span><br><span class="line">                    this.lotteryTimer &#x3D; null;</span><br><span class="line">                    this.CYCLE_TIMES &#x3D; 0;</span><br><span class="line">                    this.speed &#x3D; 50;</span><br><span class="line">                    this.callbacktimer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                        this.setState(&#123; is_rolling: false, times: times - 1 &#125;)</span><br><span class="line">                        this.props.callback &amp;&amp; this.props.callback(&#123; ...act_item, ...gift &#125;, this)</span><br><span class="line">                    &#125;, 500);</span><br><span class="line">                    return</span><br><span class="line">                &#125;</span><br><span class="line">                this.current_index &#x3D; ++this.current_index % gift_list.length;</span><br><span class="line">                this.current_index &#x3D;&#x3D;&#x3D; 0 &amp;&amp; this.CYCLE_TIMES++;</span><br><span class="line">                this.lotteryTimer &#x3D; setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">                    this.start();</span><br><span class="line">                &#125;, this.speed);</span><br><span class="line">                if (this.CYCLE_TIMES &gt; cycle_times) this.speed +&#x3D; 10;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;;</span><br><span class="line">    reset &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        this.setState(&#123;</span><br><span class="line">            active_index: null,</span><br><span class="line">        &#125;)</span><br><span class="line">        this.lotteryTimer &#x3D; null;</span><br><span class="line">        this.current_index &#x3D; 0;</span><br><span class="line">        this.CYCLE_TIMES &#x3D; 0;</span><br><span class="line">        this.speed &#x3D; 50;</span><br><span class="line">    &#125;</span><br><span class="line">    handlePlay &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">        if (!this.state.times) return this.props.finishCallback &amp;&amp; this.props.finishCallback(this);</span><br><span class="line">        if (this.state.is_rolling) return;</span><br><span class="line">        this.current_index &#x3D; 0;</span><br><span class="line">        this.CYCLE_TIMES &#x3D; 0;</span><br><span class="line">        this.speed &#x3D; 50;</span><br><span class="line">        if (this.props.beforeStart) &#123;</span><br><span class="line">            this.props.beforeStart().then(() &#x3D;&gt; &#123;</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    is_rolling: true,</span><br><span class="line">                &#125;, () &#x3D;&gt; &#123;</span><br><span class="line">                    this.start();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                is_rolling: true,</span><br><span class="line">            &#125;, () &#x3D;&gt; &#123;</span><br><span class="line">                this.start();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123; active_index, roll_map_list &#125; &#x3D; this.state;</span><br><span class="line">        const gift_list &#x3D; this.data_format(this.props.giftList)</span><br><span class="line">        if (gift_list.length &lt; 8) return null;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className&#x3D;&#123;&#96;lottery pos-r&#96;&#125;&gt;</span><br><span class="line">                &lt;div className&#x3D;&#123;&#96;lottery_content&#96;&#125;&gt;</span><br><span class="line">                    &#123;gift_list.map((item, index) &#x3D;&gt; &#123;</span><br><span class="line">                        let content &#x3D; (</span><br><span class="line">                            &lt;div key&#x3D;&#123;index&#125; className&#x3D;&#123;&#96;lottery_item $&#123;active_index &#x3D;&#x3D;&#x3D; roll_map_list[index] ? &#39;lottery_item-active&#39; : &#39;&#39;&#125;&#96;&#125; &gt;</span><br><span class="line">                                &#123;item.ele ? item.ele : &lt;div className&#x3D;&#123;&#96;lottery_item_main&#96;&#125;&gt;&#123;item.name&#125;&lt;&#x2F;div&gt;&#125;</span><br><span class="line">                            &lt;&#x2F;div&gt;</span><br><span class="line">                        );</span><br><span class="line">                        if (item.startBtn) &#123;</span><br><span class="line">                            content &#x3D; (</span><br><span class="line">                                &lt;div key&#x3D;&#123;index&#125; className&#x3D;&#123;&#96;lottery_item&#96;&#125; onClick&#x3D;&#123;this.handlePlay&#125; &gt;</span><br><span class="line">                                    &#123;typeof this.props.playBtn &#x3D;&#x3D;&#x3D; &#39;object&#39; ? this.props.playBtn : &lt;div className&#x3D;&#123;&#96;lottery_item_main&#96;&#125; &gt;&#123;this.props.playBtn || item.name&#125;&lt;&#x2F;div&gt;&#125;</span><br><span class="line">                                &lt;&#x2F;div&gt;</span><br><span class="line">                            );</span><br><span class="line">                        &#125;</span><br><span class="line">                        return content;</span><br><span class="line">                    &#125;)&#125;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default LuckDraw</span><br></pre></td></tr></table></figure>
<p>1、rollup-plugin-commonjs这个包一定要引入好，并且注意使用<br>//告诉rollup不要将此lodash打包，而作为外部依赖，否则会报 <div >不识别或者  React 的Component 各种错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">external: [&quot;react&quot;],&#x2F;&#x2F;告诉rollup不要将此react打包，而作为外部依赖</span><br><span class="line">commonjs(),</span><br></pre></td></tr></table></figure>
<p>2、npm 和 git 使用共同的 version和 tags<br>3、npm 发布用下面的，添加包用上面的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class="line">npm set registry http:&#x2F;&#x2F;registry.npmjs.org</span><br></pre></td></tr></table></figure>
<h1 id="发布到-npm"><a href="#发布到-npm" class="headerlink" title="发布到 npm"></a>发布到 npm</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm login</span><br><span class="line">npm version new-version</span><br><span class="line">npm publish</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>
<h3 id="配置-npmignore"><a href="#配置-npmignore" class="headerlink" title="配置.npmignore"></a>配置.npmignore</h3><p>如果项目中没有编写 .npmignore 文件，则需要在 package.json 中新增 files 字段，用于申明将要发布到 NPM 的文件。如果省略掉这一项，所有文件包括源代码会被一起上传到 NPM。<br>本文采用写 .npmignore 文件的方式，实现仅发布打包后的组件代码。 .npmignore 文件的具体内容如下：</p>
<h1 id="指定发布-npm-的时候需要忽略的文件和文件夹"><a href="#指定发布-npm-的时候需要忽略的文件和文件夹" class="headerlink" title="指定发布 npm 的时候需要忽略的文件和文件夹"></a>指定发布 npm 的时候需要忽略的文件和文件夹</h1><h1 id="npm-默认不会把-node-modules-发上去"><a href="#npm-默认不会把-node-modules-发上去" class="headerlink" title="npm 默认不会把 node_modules 发上去"></a>npm 默认不会把 node_modules 发上去</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config # webpack配置</span><br><span class="line">example # 开发时预览代码</span><br><span class="line">src # 组件源代码目录</span><br><span class="line">.babelrc # babel 配置</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>RollupJS</category>
      </categories>
      <tags>
        <tag>RollupJS</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode命令行打开文件夹</title>
    <url>/2021/02/03/vscode%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<p>两种方式：</p>
<p>1、在VSCode 中 打开 Command+Shift + P 输入Shell安装shell command: install code command in PATH</p>
<p>2、在VSCode 中 按F1 输入code 找到shell command: install code command in PATH</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &lt;目录&gt; </span><br><span class="line">code .</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IDE</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>seo优化</title>
    <url>/2021/02/03/seo%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p><a href="[https://zh.wikipedia.org/wiki/Robots.txt](https://zh.wikipedia.org/wiki/Robots.txt)">robots.txt</a></p>
<p><a href="https://baike.baidu.com/item/Nofollow/2410595?fr=aladdin" target="_blank" rel="noopener">a标签一个有利于SEO的属性rel=”nofollow”</a></p>
<p><strong>nofollow是什么?</strong><br>nofollow 是HTML页面中a标签的属性值。这个标签的意义是告诉搜索引擎”不要追踪此网页上的链接或不要追踪此特定链接”。<br><strong>nofollow的作用?</strong><br>**　　　   ①：防止不可信的内容，最常见的是博客上的垃圾留言与评论中为了获取外链的垃圾链接，为了防止页面指向一些拉圾页面和站点。<br>　　　　②：为了防止付费链接影响Google的搜索结果排名。<br>　　　　③：引导爬虫抓取有效的页面，避免爬虫抓取一些无意义的页面，影响爬虫抓取的效率。**</p>
<p><strong>nofollow2个基本用法</strong><br>**　　　  ①：用于<meta>标签，告诉搜索引擎（爬虫）该页面上所有链接都无需追踪<strong>（这种方法一般用的较少）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;pre style=<span class="string">"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-family: &amp;quot;Courier New&amp;quot; !important; font-size: 12px !important;"</span>&gt;　　<span class="xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"nofollow"</span> /&gt;</span></span>&lt;<span class="regexp">/pre&gt;</span></span><br></pre></td></tr></table></figure>
<p>②：用于<a>标签，告诉搜索引擎（爬虫）加上此属性的链接无需追踪<strong>（一般推荐用这种方法）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;pre style=<span class="string">"margin-top: 0px; margin-bottom: 0px; white-space: pre-wrap; overflow-wrap: break-word; font-family: &amp;quot;Courier New&amp;quot; !important; font-size: 12px !important;"</span>&gt;　　<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.aspx"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>,&lt;<span class="regexp">/pre&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>seo</category>
      </categories>
      <tags>
        <tag>Search Engine</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>stylelint-css代码格式化</title>
    <url>/2021/02/03/stylelint-css%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://stylelint.docschina.org/user-guide/rules/" target="_blank" rel="noopener">stylelint</a>：** stylelint 是一个强大和现代的 CSS 审查工具，有助于开发者推行统一的代码规范，避免样式错误<code>stylelint拥有超过150条的规则，包括捕捉错误、最佳实践、控制可以使用的语言特性和强制代码风格规范。</code>。stylelint 由 PostCSS 提供技术支持，所以它也可以理解 PostCSS 解析的语法，比如 SCSS。</p>
</blockquote>
<p>命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stylelint --fix src&#x2F;**&#x2F;*.&#123;html,css,scss&#125;</span><br></pre></td></tr></table></figure>

<p>插件：</p>
<ul>
<li><a href="https://github.com/prettier/stylelint-config-prettier" target="_blank" rel="noopener"><code>stylelint-config-prettier</code></a>：禁用所有与格式相关的 Stylelint 规则，解决 prettier 与 stylelint 规则冲突，确保将其放在 extends 队列最后，这样它将覆盖其他配置。</li>
<li><a href="https://github.com/AndyOGo/stylelint-declaration-strict-value" target="_blank" rel="noopener"><code>stylelint-config-standard</code></a>：官网提供的 css 标准</li>
<li><a href="https://github.com/sh-waqar/stylelint-declaration-use-variable" target="_blank" rel="noopener"><code>stylelint-prettier</code></a>：基于 prettier 代码风格的 stylelint 规则</li>
<li><a href="https://github.com/stormwarning/stylelint-config-recess-order" target="_blank" rel="noopener">stylelint-config-recess-order：</a> 属性排列顺序</li>
</ul>
<h3 id="stylelint配置（官方）"><a href="#stylelint配置（官方）" class="headerlink" title="stylelint配置（官方）"></a>stylelint配置（官方）</h3><ul>
<li><p>extends：可指定继承指定的配置规则；您可以继承现有配置的数组，数组中的每个项都优先于前一项<br>例如：继承 <a href="https://github.com/stylelint/stylelint-config-standard" target="_blank" rel="noopener"><code>stylelint-config-standard</code></a>，<code>myExtendableConfig</code> 覆盖<code>stylelint-config-standard</code>，然后自定义覆盖缩进规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;stylelint-config-standard&quot;,</span><br><span class="line">    &quot;.&#x2F;myExtendableConfig&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;indentation&quot;: &quot;tab&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>plugins 数组，一旦声明了插件，在您的 “rules” 对象中，您需要为插件的规则添加选项，就像任何标准规则一样。“插件”可以提供单个规则或规则集。如果您使用的插件提供规则集，只需在 “plugins” 配置中调用该模块，并在”rules”中使用它提供的规则。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;plugins&quot;: [</span><br><span class="line">    &quot;..&#x2F;some-rule-set.js&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;rules&quot;: &#123;</span><br><span class="line">    &quot;some-rule-set&#x2F;first-rule&quot;: &quot;everything&quot;,</span><br><span class="line">    &quot;some-rule-set&#x2F;second-rule&quot;: &quot;nothing&quot;,</span><br><span class="line">    &quot;some-rule-set&#x2F;third-rule&quot;: &quot;everything&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ignoreFiles</p>
</li>
<li><p>defaultSeverity：未在辅助选项中指定严重性的所有规则的默认严重性级别。severity 的可用值是”warning””error”</p>
</li>
<li><p>.stylelintignore</p>
</li>
<li><p>rules</p>
</li>
<li><p><a href="https://github.com/stylelint/stylelint-config-standard" target="_blank" rel="noopener">stylelint-config-standard：</a> 官网提供的 css 标准</p>
</li>
<li><p><a href="https://github.com/stormwarning/stylelint-config-recess-order" target="_blank" rel="noopener">stylelint-config-recess-order：</a> 属性排列顺序</p>
</li>
<li><p><a href="https://www.npmjs.com/package/stylelint-prettier" target="_blank" rel="noopener">stylelint-prettier：</a> 基于 <code>prettier</code> 代码风格的 <code>stylelint</code> 规则</p>
</li>
<li><p><a href="https://www.npmjs.com/package/stylelint-config-prettier" target="_blank" rel="noopener">stylelint-config-prettier：</a> 禁用所有与格式相关的 Stylelint 规则，解决 prettier 与 stylelint 规则冲突，确保将其放在 <code>extends</code> 队列最后，这样它将覆盖其他配置。</p>
</li>
</ul>
<h3 id="项目增加stylelint"><a href="#项目增加stylelint" class="headerlink" title="项目增加stylelint"></a>项目增加stylelint</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add stylelint stylelint-config-standard stylelint-config-rational-order stylelint-prettier stylelint-config-prettier -D</span><br></pre></td></tr></table></figure>
<p>.stylelintrc </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;defaultSeverity&quot;: &quot;error&quot;,</span><br><span class="line">  &quot;extends&quot;: [</span><br><span class="line">    &quot;stylelint-config-recommended&quot;,</span><br><span class="line">    &quot;stylelint-config-standard&quot;,</span><br><span class="line">    &quot;stylelint-prettier&#x2F;recommended&quot;,</span><br><span class="line">  ],</span><br><span class="line">  &quot;rules&quot;:  &#123;</span><br><span class="line">    &quot;selector-pseudo-class-no-unknown&quot;: [true, &#123;</span><br><span class="line">      ignorePseudoClasses: [&quot;global&quot;] &#x2F;&#x2F;.module.scss</span><br><span class="line">    &#125;],</span><br><span class="line">    &quot;length-zero-no-unit&quot;: null,&#x2F;&#x2F;单位可以有0</span><br><span class="line">    &quot;indentation&quot;: 2,</span><br><span class="line">    &quot;max-empty-lines&quot;: 1,</span><br><span class="line">    &quot;block-no-empty&quot;: true,</span><br><span class="line">    &quot;block-opening-brace-newline-after&quot;: &quot;always-multi-line&quot;,</span><br><span class="line">    &quot;block-opening-brace-space-after&quot;: &quot;always-single-line&quot;,</span><br><span class="line">    &quot;block-opening-brace-space-before&quot;: &quot;always&quot;,</span><br><span class="line">    &quot;block-closing-brace-empty-line-before&quot;: &quot;never&quot;,</span><br><span class="line">    &quot;declaration-empty-line-before&quot;: &quot;never&quot;,</span><br><span class="line">    &quot;declaration-block-no-duplicate-properties&quot;: true,</span><br><span class="line">    &quot;declaration-block-no-redundant-longhand-properties&quot;: true,</span><br><span class="line">    &quot;shorthand-property-no-redundant-values&quot;: true,</span><br><span class="line">    &quot;no-empty-source&quot;: true,</span><br><span class="line">    &quot;no-eol-whitespace&quot;: true,</span><br><span class="line">    &quot;no-extra-semicolons&quot;: true,</span><br><span class="line">    &quot;no-invalid-double-slash-comments&quot;: true,</span><br><span class="line">    &quot;no-missing-end-of-source-newline&quot;: true,</span><br><span class="line">    &quot;at-rule-no-unknown&quot;: null,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="stylelint-prettier-Recommended-Configuration"><a href="#stylelint-prettier-Recommended-Configuration" class="headerlink" title="stylelint-prettier Recommended Configuration"></a><a href="https://github.com/prettier/stylelint-prettier" target="_blank" rel="noopener">stylelint-prettier</a> Recommended Configuration</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save-dev stylelint-config-prettier stylelint-prettier prettier</span><br></pre></td></tr></table></figure>
<p>.stylelintrc</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;extends&quot;: [&quot;stylelint-prettier&#x2F;recommended&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>his does three things:<br>1、Enables the stylelint-plugin-prettier plugin.<br>2、Enables the prettier/prettier rule.<br>3、Extends the stylelint-config-prettier configuration.</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>stylelint</category>
      </categories>
      <tags>
        <tag>stylelint</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode插件推荐</title>
    <url>/2021/02/03/vscode%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<h2 id="Quokka-js"><a href="#Quokka-js" class="headerlink" title="Quokka.js"></a>Quokka.js</h2><p><a href="https://link.zhihu.com/?target=https%3A//quokkajs.com/">Quokka.js</a> 会在您键入代码编辑器中显示各种执行结果时立即运行您的代码。支持 JavaScript 和 TypeScript。</p>
<p><img src="https://pic4.zhimg.com/v2-c2ac27d4da86597bb54f56c2dbc7f457_b.webp" alt="image"></p>
<p><strong>类似的 Extension:</strong></p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dformulahendry.code-runner">Code Runner</a>  — 支持多种语言例如： C，C++，Java，JavaSript，PHP，Python，Perl，Perl6 等</li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dmattn.Runner">Runner</a></li>
</ul>
<h2 id="Bracket-Pair-Colorizer-和-Indent-Rainbow"><a href="#Bracket-Pair-Colorizer-和-Indent-Rainbow" class="headerlink" title="Bracket Pair Colorizer 和 Indent Rainbow"></a>Bracket Pair Colorizer 和 Indent Rainbow</h2><p>大部分的语言都需要使用括号，但是括号之间的嵌套会让代码看得很难受。 <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DCoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a> 和 <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Doderwat.indent-rainbow">Indent Rainbow</a>，这两个插件可以让不同缩减的括号显示不同的颜色。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-8520b7c72cfa4b9a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<figcaption style="margin-top: 0.66667em; padding: 0px 1em; font-size: 0.9em; line-height: 1.5; text-align: center; color: rgb(153, 153, 153);">使用插件前</figcaption>

<p><img src="https://upload-images.jianshu.io/upload_images/2790249-00d2e790413abde8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<figcaption style="margin-top: 0.66667em; padding: 0px 1em; font-size: 0.9em; line-height: 1.5; text-align: center; color: rgb(153, 153, 153);">使用插件后</figcaption>

<h2 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h2><p>Snippets 是一些常用的代码片段，比如说 <code>import React from &#39;react&#39;;</code> 这些常用的代码，我们只需要打 <code>imr</code> 然后按下 tab 键就能自动帮我们补全。同样的 <code>clg</code> 会变成 <code>console.log</code>。</p>
<p><strong>一些不错的 extension 有</strong></p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dxabikos.JavaScriptSnippets">JavaScript (ES6) code snippets</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DEQuimper.react-native-react-redux">React-Native/React/Redux snippets for es6/es7</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DTimonVS.ReactSnippetsStandard">React Standard Style code snippets - Visual Studio Marketplace</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DTimonVS.ReactSnippetsStandard">React Standard Style code snippets - Visual Studio Marketplace</a></li>
</ul>
<h2 id="TODO-高亮"><a href="#TODO-高亮" class="headerlink" title="TODO 高亮"></a>TODO 高亮</h2><p>通常我们编写代码的时候，会觉得当前实现不优雅，有更好的实现方式。我们会习惯性的加上<code>// TODO: Needs Refactoring</code> 或者其他内容。不过时间久了我们就习得一个技能自动忽略 TODO。 <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dwayou.vscode-todo-highlight">Todo Highlighter</a> 这个插件可以督促你赶紧把这个问题处理了。他会在还有 TODOs / FIXMEs 的地方出现高亮提示。（插件都已经帮到这份上了，之后修行就靠个人了）</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-2da5b3945a3924ed.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><strong>类似的 Extension：</strong></p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dfabiospampinato.vscode-todo-plus">Todo+</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dminhthai.vscode-todo-parser">Todo Parser</a></li>
</ul>
<h2 id="成本提示"><a href="#成本提示" class="headerlink" title="成本提示"></a>成本提示</h2><p><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dwix.vscode-import-cost">Import Cost</a> 这个扩展简直惊艳到我了，之前写代码的时候很少有关注导入包的大小。只有在后期优化的时候才考虑这些问题。但是这个插件可以在你导入包的时候就提示这个包有多大。</p>
<p><img src="https://pic2.zhimg.com/v2-3a0a3376796f9facfe7a50a949fbe4b6_b.webp" alt="image"></p>
<h2 id="REST-客户端"><a href="#REST-客户端" class="headerlink" title="REST 客户端"></a>REST 客户端</h2><p>作为一个 Web 开发，我们经常需要使用 REST API。为了检测 URL 并检测响应，我们一般会使用 Postman 这类工具来测试。但是如果使用了 <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dhumao.rest-client">REST Client</a> 这个插件我们就可以直接在 VSCode 中来测试我们的 API 了。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-9a7e2e8fa79f5ff8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h2 id="自动补全标签和联动重名标签"><a href="#自动补全标签和联动重名标签" class="headerlink" title="自动补全标签和联动重名标签"></a>自动补全标签和联动重名标签</h2><p>在 VSCode 中输入一半的标签会自动帮忙补全另一半，但是如果我后期想修改的话需要就需要两边都要改了。 <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dformulahendry.auto-close-tag">Auto Close Tag</a> 和 <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dformulahendry.auto-rename-tag">Auto Rename Tag</a> 插件可以很好的解决这个问题。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-49d37e1b86355028.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<figcaption style="margin-top: 0.66667em; padding: 0px 1em; font-size: 0.9em; line-height: 1.5; text-align: center; color: rgb(153, 153, 153);">Auto Rename Tag</figcaption>

<p><img src="https://upload-images.jianshu.io/upload_images/2790249-9da191196d4df61a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<figcaption style="margin-top: 0.66667em; padding: 0px 1em; font-size: 0.9em; line-height: 1.5; text-align: center; color: rgb(153, 153, 153);">Auto Close Tag</figcaption>

<p><strong>类似的插件：</strong></p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dformulahendry.auto-complete-tag">Auto Complete Tag</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DCompulim.compulim-vscode-closetag">Close HTML/XML tag - Visual Studio Marketplace</a></li>
</ul>
<h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h2><p>GitLens 可以增强 VSCode 内置 Git 的功能。例如 commits 搜索，历史记录和显示的代码作者身份具体功能可以查看 <a href="https://link.zhihu.com/?target=https%3A//github.com/eamodio/vscode-gitlens">Feature List</a>。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-d0a35fe17e9fd49a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><strong>类似的 Extension</strong>：</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Ddonjayamanne.githistory">Git History</a>  - 显示提交历史记录的美丽图表等等。<strong>推荐</strong>。</li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dwaderyan.gitblame">Git Blame</a>  - 它允许您在当前选定行的状态栏中看到 Git Blame 信息。GitLens 也提供了类似的功能。</li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dlamartire.git-indicators">Git Indicators </a> - 它允许您查看受影响的文件以及状态栏中添加或删除的行数。</li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dziyasal.vscode-open-in-github">Open in GitHub / Bitbucket / Gitlab / VisualStudio.com !</a> - 它允许您使用浏览器中打开具体的 repo。</li>
</ul>
<h2 id="Git-Project-Manager"><a href="#Git-Project-Manager" class="headerlink" title="Git Project Manager"></a>Git Project Manager</h2><p>Git Project Manager 允许你直接从 VSCode 窗口打开一个新的窗口。这样我们就可以在 VSCode 中切换仓库了。</p>
<p>在安装这个 <a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dfelipecaputo.git-project-manager">插件</a> 后，需要设置 <code>gitProjectManager.baseProjectsFolders</code> 包含我们需要的仓库。</p>
<p>例如 ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;gitProjectManager.baseProjectsFolders&quot;: [</span><br><span class="line">        &quot;&#x2F;home&#x2F;user&#x2F;nodeProjects&quot;,</span><br><span class="line">        &quot;&#x2F;home&#x2F;user&#x2F;personal&#x2F;pocs&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/2790249-a588f65eb90307bb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><strong>类似的 **Extension</strong>：**</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dalefragnani.project-manager">Project Manager</a></li>
</ul>
<h2 id="Indenticator"><a href="#Indenticator" class="headerlink" title="Indenticator"></a>Indenticator</h2><p>indenticator 可以直观的突出当前的缩进深度。可以容易区分不同层次的缩进。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-1421e032e85a75d8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><strong>类似的 Extension：</strong></p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dspywhere.guides">Guides</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Dspywhere.guides">Guides - Visual Studio Marketplace</a></li>
</ul>
<h2 id="VSCode-图标"><a href="#VSCode-图标" class="headerlink" title="VSCode 图标"></a>VSCode 图标</h2><p>可以美化编辑器。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-5a6a1d10cd3b3a30.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><strong>类似的 Extension：</strong></p>
<ul>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Demmanuelbeziat.vscode-great-icons">VSCode Great Icons</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Djtlowe.vscode-icon-theme">Studio Icons</a></li>
<li><a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Djtlowe.vscode-icon-theme">Studio Icons - Visual Studio Marketplace</a></li>
</ul>
<h2 id="Dracula（主题）"><a href="#Dracula（主题）" class="headerlink" title="Dracula（主题）"></a>Dracula（主题）</h2><p>我喜欢的一个<a href="https://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3Ddracula-theme.theme-dracula">主题</a>。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-9f48feb8160f3bc4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<h3 id="annotator"><a href="#annotator" class="headerlink" title="annotator"></a>annotator</h3><p><img src="https://upload-images.jianshu.io/upload_images/2790249-6a8eeed0e5d3af66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="WeChatWorkScreenshot_0d5b0dfb-52f3-4bf0-8385-99a7d38aface.png"></p>
<h3 id="filesize：文件大小插件"><a href="#filesize：文件大小插件" class="headerlink" title="filesize：文件大小插件"></a>filesize：文件大小插件</h3><h3 id="EditorConfig：生成-editorconfig-配置文件，规定当前编辑器的一些设定。"><a href="#EditorConfig：生成-editorconfig-配置文件，规定当前编辑器的一些设定。" class="headerlink" title="EditorConfig：生成 .editorconfig 配置文件，规定当前编辑器的一些设定。"></a>EditorConfig：生成 .editorconfig 配置文件，规定当前编辑器的一些设定。</h3><h3 id="ESLint：代码质量检查。"><a href="#ESLint：代码质量检查。" class="headerlink" title="ESLint：代码质量检查。"></a>ESLint：代码质量检查。</h3><h3 id="styleLint：css代码质量检查。"><a href="#styleLint：css代码质量检查。" class="headerlink" title="styleLint：css代码质量检查。"></a>styleLint：css代码质量检查。</h3><h3 id="Prettier：格式化代码"><a href="#Prettier：格式化代码" class="headerlink" title="Prettier：格式化代码"></a>Prettier：格式化代码</h3><h3 id="Code-Spell-Checker：单词拼写检查。"><a href="#Code-Spell-Checker：单词拼写检查。" class="headerlink" title="Code Spell Checker：单词拼写检查。"></a>Code Spell Checker：单词拼写检查。</h3>]]></content>
      <categories>
        <category>IDE</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode格式化不符合预期</title>
    <url>/2021/02/03/vscode%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8D%E7%AC%A6%E5%90%88%E9%A2%84%E6%9C%9F/</url>
    <content><![CDATA[<p>vscode 的 setting.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;workbench.colorTheme&quot;: &quot;Dracula Soft&quot;,</span><br><span class="line">  &quot;editor.formatOnSave&quot;: true,&#x2F;&#x2F;保存时使用VSCode 自身格式化程序格式化</span><br><span class="line">  &quot;javascript.format.enable&quot;: false,&#x2F;&#x2F;关闭编辑器对 js 文件的格式化，交给 ESLint 来做格式化，否则会格式化两次，解决editor.formatOnSave的兼容问题</span><br><span class="line">  &quot;editor.codeActionsOnSave&quot;: &#123;</span><br><span class="line">    &quot;source.fixAll&quot;: true,</span><br><span class="line">    &#x2F;&#x2F; For ESLint</span><br><span class="line">    &quot;source.fixAll.eslint&quot;: true,</span><br><span class="line">    &#x2F;&#x2F; For TSLint</span><br><span class="line">    &quot;source.fixAll.tslint&quot;: true,</span><br><span class="line">    &#x2F;&#x2F; For Stylelint</span><br><span class="line">    &quot;source.fixAll.stylelint&quot;: true</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;eslint.probe&quot;: [</span><br><span class="line">    &quot;javascript&quot;,</span><br><span class="line">    &quot;javascriptreact&quot;,</span><br><span class="line">    &quot;typescript&quot;,</span><br><span class="line">    &quot;typescriptreact&quot;</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>.editorconfig</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># http:&#x2F;&#x2F;editorconfig.org</span><br><span class="line">root &#x3D; true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">indent_style &#x3D; space</span><br><span class="line">indent_size &#x3D; 2 # 用两个空格代替制表符；</span><br><span class="line">end_of_line &#x3D; lf # win用cr lf，linux&#x2F;unix用lf，mac用cr。统一window和mac</span><br><span class="line">charset &#x3D; utf-8</span><br><span class="line">trim_trailing_whitespace &#x3D; true# 在保存时删除尾部的空白字符；</span><br><span class="line">insert_final_newline &#x3D; true# 在文件结尾添加一个空白行；</span><br><span class="line">max_line_length &#x3D; 160# 每行代码最大宽度 160</span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace &#x3D; false</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>IDE</category>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始了解babel配置</title>
    <url>/2021/02/03/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%BA%86%E8%A7%A3babel%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="什么是Babel"><a href="#什么是Babel" class="headerlink" title="什么是Babel"></a>什么是Babel</h2><blockquote>
<p>The compiler for writing next generation JavaScript.<br>官网是这么说的，翻译一下就是下一代JavaScript 语法的编译器。<code>Babel不仅仅是编译代码的工具，还能对代码进行压缩</code></p>
</blockquote>
<h2 id="babel-cli-打包babel6"><a href="#babel-cli-打包babel6" class="headerlink" title="babel-cli 打包babel6"></a><a href="https://github.com/sailormillet/babel-pro" target="_blank" rel="noopener">babel-cli 打包babel6</a></h2><p><strong>babel7是@babel/cli</strong></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add @babel&#x2F;cli @babel&#x2F;core -D</span><br></pre></td></tr></table></figure>
<h4 id="执行，打包后的es6语法没有转化"><a href="#执行，打包后的es6语法没有转化" class="headerlink" title="执行，打包后的es6语法没有转化"></a>执行，打包后的es6语法没有转化</h4><blockquote>
<p>babel是一个编译器（输入源码 =&gt; 输出编译后的代码）。就像其他编译器一样，编译过程分为三个阶段：解析、转换和打印输出。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;build&quot;: &quot;babel src&#x2F;index.js --out-file dist&#x2F;index.js&quot;</span><br></pre></td></tr></table></figure>
<h4 id="插件才是编译代码的核心"><a href="#插件才是编译代码的核心" class="headerlink" title="插件才是编译代码的核心"></a>插件才是编译代码的核心</h4><blockquote>
<p>babel如果没有插件没有办法编译出转化出支持各个浏览器的代码</p>
</blockquote>
<p><strong>babel开发者为配置文件提供了多种形式, babel7官方推荐用babel.config.js的形式。也可以用.babelrc, .babelrc.js 或者放到package.json中</strong></p>
<h5 id="插件单个引入"><a href="#插件单个引入" class="headerlink" title="插件单个引入"></a>插件单个引入</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@babel&#x2F;plugin-transform-arrow-functions 转化箭头函数</span><br><span class="line">&quot;plugins&quot;:[</span><br><span class="line">        &quot;@babel&#x2F;plugin-transform-arrow-functions&quot;</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>

<h4 id="预设preset（插件包）"><a href="#预设preset（插件包）" class="headerlink" title="预设preset（插件包）"></a>预设preset（插件包）</h4><blockquote>
<p>babel会预先替我们做好了一系列的插件包</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@babel&#x2F;preset-env 转化基本语法</span><br></pre></td></tr></table></figure>
<h4 id="babel-polyfill"><a href="#babel-polyfill" class="headerlink" title="@babel/polyfill"></a>@babel/polyfill</h4><blockquote>
<p>es6新增的方法在低版本的游览器无法使用, Babel 所做的只是帮你把ES6 模块化语法转化为CommonJS 模块化语法，其中的 require exports 等是 CommonJS 在具体实现中所提供的变量。</p>
</blockquote>
<blockquote>
<p>任何实现 CommonJS 规范的环境（如 node 环境）可以直接运行这样的代码，而浏览器环境并没有实现对 CommonJS 规范的支持，所以我们需要使用打包工具（bundler）来进行打包，说的直观一点就是把所有的模块组装起来，为我们的代码做一些包裹，让它能在浏览器端使用。形成一个常规的 js 文件。打包工具有 比如 Browserify, Webpack 等</p>
</blockquote>
<p>src/index</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#39;@babel&#x2F;polyfill&#39;; &#x2F;&#x2F; 这就是@babel&#x2F;polyfill的用法</span><br><span class="line"></span><br><span class="line">let arrow &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;arrow&#39;)</span><br><span class="line">&#125;</span><br><span class="line">let arr &#x3D; [1, 2, 3]</span><br><span class="line">arr.includes(3)</span><br></pre></td></tr></table></figure>
<p>打包到dist下，require浏览器运行不起来，只能node使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">require(&quot;@babel&#x2F;polyfill&quot;);</span><br><span class="line">var func &#x3D; function func() &#123;&#125;;</span><br><span class="line">var arr &#x3D; [1, 2, 4];</span><br><span class="line">arr.includes(3);</span><br></pre></td></tr></table></figure>
<h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ul>
<li>Plugin 会运行在 Preset 之前。</li>
<li>Plugin 会从前到后顺序执行。</li>
<li>Preset 的顺序则 刚好相反(从后向前)</li>
</ul>
<h4 id="安装webpack，打包的文件可以在浏览器运行"><a href="#安装webpack，打包的文件可以在浏览器运行" class="headerlink" title="安装webpack，打包的文件可以在浏览器运行"></a>安装webpack，打包的文件可以在浏览器运行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add webpack webpack-cli babel-loader -D</span><br></pre></td></tr></table></figure>
<blockquote>
<p>webpack 有 loader 的概念，因此就出现了 babel-loader 和 babel-cli 一样也会读取 .babelrc 或者 package.json 中的 babel 段作为自己的配置，之后的内核处理也是相同。唯一比 babel-cli 复杂的是，它需要和 webpack 交互，因此需要在 webpack 这边进行配置。比较常见的如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: &#x2F;\.js$&#x2F;,</span><br><span class="line">      exclude: &#x2F;(node_modules)&#x2F;,</span><br><span class="line">      loader: &#39;babel-loader&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想在这里传入 babel 的配置项，也可以把改成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; loader: &#39;babel-loader&#39; 改成如下：</span><br><span class="line">use: &#123;</span><br><span class="line">  loader: &#39;babel-loader&#39;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    &#x2F;&#x2F; 配置项在这里</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>webpack打包后发现</p>
<ul>
<li>不压缩代码要261 KiB </li>
<li>压缩代码也只是87.49 KiB</li>
<li>而原始的直接babel编译只要178 bytes</li>
</ul>
<h3 id="优化-按需加载"><a href="#优化-按需加载" class="headerlink" title="优化 (按需加载)"></a>优化 (按需加载)</h3><blockquote>
<p>设置 .babelrc 增加useBuiltIns,useBuiltIns为usage时候必须设置corejs,@babel/polyfill默认会安装 “corejs”: 2</p>
</blockquote>
<blockquote>
<p>core-js@2 中不支持新的特性了例如Array.prototype.flat()</p>
</blockquote>
<blockquote>
<p>core-js@3支持很多新特性</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn add core-js@3 -D</span><br><span class="line">yarn remove @babel&#x2F;polyfill</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [</span><br><span class="line">        [</span><br><span class="line">            &quot;@babel&#x2F;preset-env&quot;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;targets&quot;: &#123;</span><br><span class="line">                    &quot;browsers&quot;: [</span><br><span class="line">                        &quot;&gt; 1%&quot;,</span><br><span class="line">                        &quot;last 2 versions&quot;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;useBuiltIns&quot;: &quot;usage&quot;,</span><br><span class="line">                &quot;corejs&quot;: 3&#x2F;&#x2F;默认是2</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#### 避免编译后的代码中出现重复的帮助程序，有效减少包体积 ,@babel&#x2F;plugin-transform-runtime 是一个可以重复使用 Babel 注入的帮助程序，以节省代码大小的插件。@babel&#x2F;plugin-transform-runtime 需要和 @babel&#x2F;runtime 配合使用</span><br></pre></td></tr></table></figure>
<p>yarn add @babel/plugin-transform-runtime  @babel/runtime -D</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">src&#x2F;index.js</span><br></pre></td></tr></table></figure>
<p>import bbb from ‘./other’<br>let arrow = () =&gt; {<br>    console.log(‘arrow’)<br>}<br>let arr = [1, 2, 3]<br>arr.includes(3)<br>bbb()<br>class App {</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src&#x2F;other.js</span><br></pre></td></tr></table></figure>
<p>class other{</p>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">编译后的代码，_classCallCheck 这个方法定义了两次。一个 js 文件就定义一次。那项目中有很多文件，岂不是定义很多次。</span><br><span class="line"></span><br><span class="line"># Babel7 和 Babel6区别</span><br><span class="line">#### preset 的变更</span><br><span class="line">&gt; 淘汰 es201x，删除 stage-x，强推 env (重点).凡是使用 es201x 的开发者，都应当使用 env 进行替换</span><br><span class="line"></span><br><span class="line">为了减少开发者替换配置文件的机械工作，babel 开发了一款 babel-upgrade 的工具，它会检测 babel 配置中的 stage-x 并且替换成对应的 plugins。除此之外它还有其他功能，我们一会儿再详细看。(总之目的就是让你更加平滑地迁移到 babel 7)</span><br><span class="line"></span><br><span class="line">#### npm package 名称的变化</span><br><span class="line"></span><br><span class="line">这是 babel 7 的一个重大变化，把所有 babel-* 重命名为 @babel&#x2F;*，例如：</span><br><span class="line"></span><br><span class="line">babel-cli 变成了 @babel&#x2F;cli。</span><br><span class="line">babel-preset-env 变成了 @babel&#x2F;preset-env。进一步，还可以省略 preset 而简写为 @babel&#x2F;env。</span><br><span class="line">babel-plugin-transform-arrow-functions 变成了 @babel&#x2F;plugin-transform-arrow-functions。和 preset 一样，plugin 也可以省略，于是简写为 @babel&#x2F;transform-arrow-functions。</span><br><span class="line">这个变化不单单应用于 package.json 的依赖中，包括 .babelrc 的配置 (plugins, presets) 也要这么写，为了保持一致。例如</span><br></pre></td></tr></table></figure>
<p>{<br>  “presets”: [</p>
<ul>
<li>“env”</li>
</ul>
<ul>
<li>“@babel/preset-env”<br>]<br>}<pre><code>顺带提一句，上面提过的 babel 解析语法的内核 babylon 现在重命名为 @babel/parser，看起来是被收编了。
</code></pre></li>
</ul>
<p>上文提过的 stage-x 被删除了，它包含的插件虽然保留，但也被重命名了。babel 团队希望更明显地区分已经位于规范中的插件 (如 es2015 的 babel-plugin-transform-arrow-functions) 和仅仅位于草案中的插件 (如 stage-0 的 @babel/plugin-proposal-function-bind)。方式就是在名字中增加 proposal，所有包含在 stage-x 的转译插件都使用了这个前缀，语法插件不在其列。</p>
<p>最后，如果插件名称中包含了规范名称 (-es2015-, -es3- 之类的)，一律删除。例如 babel-plugin-transform-es2015-classes 变成了 @babel/plugin-transform-classes。(这个插件我自己没有单独用过，惭愧)</p>
<h4 id="不再支持低版本-node"><a href="#不再支持低版本-node" class="headerlink" title="不再支持低版本 node"></a>不再支持低版本 node</h4><p>babel 7.0 开始不再支持 nodejs 0.10, 0.12, 4, 5 这四个版本，相当于要求 nodejs &gt;= 6 (当前 nodejs LTS 是 8)。</p>
<p>这里的不再支持，指的是在这些低版本 node 环境中不能使用 babel 转译代码，但 babel 转译后的代码依然能在这些环境上运行，这点不要混淆。</p>
<h4 id="only-和-ignore-匹配规则的变化"><a href="#only-和-ignore-匹配规则的变化" class="headerlink" title="only 和 ignore 匹配规则的变化"></a>only 和 ignore 匹配规则的变化</h4><p>在 babel 6 时，ignore 选项如果包含 <em>.foo.js，实际上的含义 (转化为 glob) 是 ./**/</em>.foo.js，也就是当前目录 包括子目录 的所有 foo.js 结尾的文件。这可能和开发者常规的认识有悖。</p>
<p>于是在 babel 7，相同的表达式 <em>.foo.js 只作用于当前目录，不作用于子目录。如果依然想作用于子目录的，就要按照 glob 的完整规范书写为 ./**/</em>.foo.js 才可以。only 也是相同。</p>
<p>这个规则变化只作用于通配符，不作用于路径。所以 node_modules 依然包含所有它的子目录，而不单单只有一层。</p>
<h4 id="babel-node-从-babel-cli-中独立了"><a href="#babel-node-从-babel-cli-中独立了" class="headerlink" title="@babel/node 从 @babel/cli 中独立了"></a>@babel/node 从 @babel/cli 中独立了</h4><p>和 babel 6 不同，如果要使用 @babel/node，就必须单独安装，并添加到依赖中。</p>
<h4 id="babel-upgrade"><a href="#babel-upgrade" class="headerlink" title="babel-upgrade"></a>babel-upgrade</h4><p>在提到删除 stage-x 时候提过这个工具，它的目的是帮助用户自动化地从 babel 6 升级到 7。</p>
<p>这款升级工具的功能包括：(这里并不列出完整列表，只列出比较重要和常用的内容)</p>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>把依赖(和开发依赖)中所有的 babel-* 替换为 @babel/*<br>把这些 @babel/* 依赖的版本更新为最新版 (例如 ^7.0.0)<br>如果 scripts 中有使用 babel-node，自动添加 @babel/node 为开发依赖<br>如果有 babel 配置项，检查其中的 plugins 和 presets，把短名 (env) 替换为完整的名字 (@babel/preset-env)<br>.babelrc<br>检查其中的 plugins 和 presets，把短名 (env) 替换为完整的名字 (@babel/preset-env)<br>检查是否包含 preset-stage-x，如有替换为对应的插件并添加到 plugins<br>使用方式如下：</p>
<h1 id="不安装到本地而是直接运行命令，npm-的新功能"><a href="#不安装到本地而是直接运行命令，npm-的新功能" class="headerlink" title="不安装到本地而是直接运行命令，npm 的新功能"></a>不安装到本地而是直接运行命令，npm 的新功能</h1><p>npx babel-upgrade –write</p>
<h1 id="或者常规方式"><a href="#或者常规方式" class="headerlink" title="或者常规方式"></a>或者常规方式</h1><p>npm i babel-upgrade -g<br>babel-upgrade –write<br>babel-upgrade 工具本身也还在开发中，还列出了许多 TODO 没有完成，因此之后的功能可能会更加丰富，例如上面提过的 ignore 的通配符转化等等。</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>babel</category>
      </categories>
      <tags>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化发展</title>
    <url>/2021/02/03/%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95/</url>
    <content><![CDATA[<h3 id="什么是模块"><a href="#什么是模块" class="headerlink" title="什么是模块?"></a>什么是模块?</h3><blockquote>
<p>模块化是一种解决问题的方案，一个模块就是实现某种特定功能的文件，可以帮助开发者拆分和组织代码。</p>
</blockquote>
<ul>
<li>将一个复杂的程序依据一定的规则(规范)封装成几个块(文件), 并进行组合在一起</li>
<li>块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信<h3 id="js模块化"><a href="#js模块化" class="headerlink" title="js模块化"></a>js模块化</h3></li>
</ul>
<hr>
<blockquote>
<p>JavaScript语言在设计之初只是为了完成简单的功能，因此没有模块化的设计。但是随着前端应用的越来越庞大，模块化成为了js语言必须解决的问题。</p>
</blockquote>
<h3 id="模块化发展"><a href="#模块化发展" class="headerlink" title="模块化发展"></a>模块化发展</h3><p><strong>js的模块化发展大致可以划分为五个阶段：</strong></p>
<ul>
<li><strong>1、文件划分</strong>全局function模式 : 将不同的功能封装成不同的全局函数<blockquote>
<p>文件划分方式无法管理模块的依赖关系（不是强制定义模块依赖），而且模块内所有变量都挂载在全局对象上，<code>容易污染全局作用域，命名冲突</code>。</p>
</blockquote>
</li>
</ul>
<p>按照js文件划分模块，一个文件可以认为是一个模块，然后将文件通过script标签的方式引入。<br>编写模块：foo.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var foo &#x3D; &#39;foo&#39;</span><br><span class="line">function sayHello() &#123;</span><br><span class="line">    console.log(foo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;header&gt;&lt;&#x2F;header&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--先引用--&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;.&#x2F;foo.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F; 通过全局对象调用</span><br><span class="line">        window.sayHello()</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>2、命名空间</strong>namespace模式 : 简单对象封装</p>
<blockquote>
<p>使用命名空间的好处是可以尽量避免命名冲突，但是由于命名空间挂载在全局对象下，依然能够在外部修改模块的变量（没有实现模块私有化）。<br>将文件内所有的变量都添加到一个命名空间下。<br>编写模块：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var FooModule &#x3D; &#123;</span><br><span class="line">    foo: &#39;foo&#39;,</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        console.log(FooModule.foo)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 通过命名空间调用</span><br><span class="line">    FooModule.sayHello()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>3、立即执行函数</strong>IIFE模式：匿名函数自调用(闭包)</p>
<blockquote>
<p>作用: 数据是私有的, 外部只能通过暴露的方法操作<br>编码: 将数据和行为封装到一个函数内部, 通过给window添加属性来向外暴露接口<br>问题: 如果当前这个模块依赖另一个模块怎么办?</p>
</blockquote>
</li>
</ul>
<p>编写模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(function(window) &#123;</span><br><span class="line">  let data &#x3D; &#39;www.baidu.com&#39;</span><br><span class="line">  &#x2F;&#x2F;操作数据的函数</span><br><span class="line">  function foo() &#123;</span><br><span class="line">    &#x2F;&#x2F;用于暴露有函数</span><br><span class="line">    console.log(&#96;foo() $&#123;data&#125;&#96;)</span><br><span class="line">  &#125;</span><br><span class="line">  function bar() &#123;</span><br><span class="line">    &#x2F;&#x2F;用于暴露有函数</span><br><span class="line">    console.log(&#96;bar() $&#123;data&#125;&#96;)</span><br><span class="line">    otherFun() &#x2F;&#x2F;内部调用</span><br><span class="line">  &#125;</span><br><span class="line">  function otherFun() &#123;</span><br><span class="line">    &#x2F;&#x2F;内部私有的函数</span><br><span class="line">    console.log(&#39;otherFun()&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;暴露行为</span><br><span class="line">  window.myModule &#x3D; &#123; foo, bar &#125; &#x2F;&#x2F;ES6写法</span><br><span class="line">&#125;)(window)</span><br></pre></td></tr></table></figure>
<p>使用模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;&#x2F; 通过命名空间调用</span><br><span class="line">    window.foo()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>4、IIFE模式增强 : 引入依赖</strong></p>
<blockquote>
<p>这就是现代模块实现的基石</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; module.js文件</span><br><span class="line">(function(window, $) &#123;</span><br><span class="line">  let data &#x3D; &#39;www.baidu.com&#39;</span><br><span class="line">  &#x2F;&#x2F;操作数据的函数</span><br><span class="line">  function foo() &#123;</span><br><span class="line">    &#x2F;&#x2F;用于暴露有函数</span><br><span class="line">    console.log(&#96;foo() $&#123;data&#125;&#96;)</span><br><span class="line">    $(&#39;body&#39;).css(&#39;background&#39;, &#39;red&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  function bar() &#123;</span><br><span class="line">    &#x2F;&#x2F;用于暴露有函数</span><br><span class="line">    console.log(&#96;bar() $&#123;data&#125;&#96;)</span><br><span class="line">    otherFun() &#x2F;&#x2F;内部调用</span><br><span class="line">  &#125;</span><br><span class="line">  function otherFun() &#123;</span><br><span class="line">    &#x2F;&#x2F;内部私有的函数</span><br><span class="line">    console.log(&#39;otherFun()&#39;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F;暴露行为</span><br><span class="line">  window.myModule &#x3D; &#123; foo, bar &#125;</span><br><span class="line">&#125;)(window, jQuery)</span><br></pre></td></tr></table></figure>
<p>// index.html文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 引入的js必须有一定顺序 --&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;jquery-1.10.1.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;module.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  myModule.foo()</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="模块化的好处"><a href="#模块化的好处" class="headerlink" title="模块化的好处"></a>模块化的好处</h3></li>
<li><p>避免命名冲突(减少命名空间污染)</p>
</li>
<li><p>更好的分离, 按需加载</p>
</li>
<li><p>更高复用性</p>
</li>
<li><p>高可维护性</p>
</li>
</ul>
<h3 id="引入多个后出现出现问题"><a href="#引入多个后出现出现问题" class="headerlink" title="引入多个后出现出现问题"></a>引入多个<script>后出现出现问题</h3><ul>
<li><p>请求过多</p>
</li>
<li><p>首先我们要依赖多个模块，那样就会发送多个请求，导致请求过多</p>
</li>
<li><p>依赖模糊</p>
</li>
<li><p>我们不知道他们的具体依赖关系是什么，也就是说很容易因为不了解他们之间的依赖关系导致加载先后顺序出错。</p>
</li>
<li><p>难以维护</p>
</li>
</ul>
<p>以上两种原因就导致了很难维护，很可能出现牵一发而动全身的情况导致项目出现严重的问题。<br>模块化固然有多个好处，然而一个页面需要引入多个js文件，就会出现以上这些问题。而这些问题可以通过模块化规范来解决，下面介绍开发中最流行的commonjs, AMD, ES6, CMD规范。</p>
<ul>
<li><strong>5、模块化规范</strong><blockquote>
<p>ES2015提出了标准模块化规范，即ES Modules。它包含一个模块化标准和一个模块加载器。</p>
</blockquote>
</li>
</ul>
<p>编写模块</p>
<p>// moduleA.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const foo &#x3D; &#39;foo&#39;</span><br></pre></td></tr></table></figure>
<p>// moduleB.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 会自动从服务器下载moduleA.js文件</span><br><span class="line">import &#123; foo &#125; from &#39;.&#x2F;moduleA.js&#39;</span><br><span class="line">console.log(foo)</span><br></pre></td></tr></table></figure>
<p>使用模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;header&gt;&lt;&#x2F;header&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!--引入moduleB.js--&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;module&quot; src&#x3D;&quot;.&#x2F;moduleB.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<p>注意事项：<br>引入模块js时，必须添加type=module<br>由于模块会自动下载依赖文件，因此html文件必须挂载到服务器下，直接文件浏览会报错。</p>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化规范</title>
    <url>/2021/02/03/%E6%A8%A1%E5%9D%97%E5%8C%96%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<p><strong><a href="https://juejin.cn/post/6844903576309858318" target="_blank" rel="noopener">前端模块化：CommonJS,AMD,CMD,ES6</a></strong></p>
<blockquote>
<p>模块化就是将一个复杂的系统分解成多个独立的模块的代码组织方式。<br>在很长的一段时间里，前端只能通过一系列的script标签来维护我们的代码关系，但是一旦我们的项目复杂度提高的时候，这种简陋的代码组织方式便是如噩梦般使得我们的代码变得混乱不堪。所以，在开发大型Javascript应用程序的时候，就必须引入模块化机制。<br><code>由于早期官方并没有提供统一的模块化解决方案，所以在群雄争霸的年代，各种前端模块化方案层出不穷。前端模块化发展之路：IIFE（自执行函数）&gt;&gt;AMD(RequireJS实现)&gt;&gt;CMD(SeaJS实现)&gt;&gt;CommonJS(NodeJs)&gt;&gt;ES6 Modules(模块化直接成为了Javascript语言规范中的一部分)</code></p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/2790249-13313af5a364d7ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><blockquote>
<p>是运行时加载，运行时才把模块挂载在exports之上（加载整个模块的所有），加载模块其实就是查找对象属性。</p>
</blockquote>
<p>Node.js是commonJS规范的主要实践者，它有四个重要的环境变量为模块化的实现提供支持：module、exports、require、global。实际使用时，用module.exports定义当前模块对外输出的接口（不推荐直接用exports），用require加载模块。<code>commonJS用同步的方式加载模块。在服务端，模块文件都存在本地磁盘，读取非常快，所以这样做不会有问题。但是在浏览器端，限于网络原因，更合理的方案是使用异步加载。</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 定义模块math.js</span><br><span class="line">var basicNum &#x3D; 0;</span><br><span class="line">function add(a, b) &#123;</span><br><span class="line">  return a + b;</span><br><span class="line">&#125;</span><br><span class="line">module.exports &#x3D; &#123; &#x2F;&#x2F;在这里写上需要向外暴露的函数、变量</span><br><span class="line">  add: add,</span><br><span class="line">  basicNum: basicNum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引用自定义的模块时，参数包含路径，可省略.js</span><br><span class="line">var math &#x3D; require(&#39;.&#x2F;math&#39;);</span><br><span class="line">math.add(2, 5);</span><br></pre></td></tr></table></figure>

<h3 id="AMD和require-js"><a href="#AMD和require-js" class="headerlink" title="AMD和require.js"></a>AMD和require.js</h3><p>AMD规范采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。这里介绍用require.js实现AMD规范的模块化：用require.config()指定引用路径等，用define()定义模块，用require()加载模块。<br>首先我们需要引入require.js文件和一个入口文件main.js。main.js中配置require.config()并规定项目中用到的基础模块。<code>require.js在申明依赖的模块时会在第一之间加载并执行模块内的代码</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 网页中引入require.js及main.js **&#x2F;</span><br><span class="line">&lt;script src&#x3D;&quot;js&#x2F;require.js&quot; data-main&#x3D;&quot;js&#x2F;main&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;** main.js 入口文件&#x2F;主模块 **&#x2F;</span><br><span class="line">&#x2F;&#x2F; 首先用config()指定各模块路径和引用名</span><br><span class="line">require.config(&#123;</span><br><span class="line">  baseUrl: &quot;js&#x2F;lib&quot;,</span><br><span class="line">  paths: &#123;</span><br><span class="line">    &quot;jquery&quot;: &quot;jquery.min&quot;,  &#x2F;&#x2F;实际路径为js&#x2F;lib&#x2F;jquery.min.js</span><br><span class="line">    &quot;underscore&quot;: &quot;underscore.min&quot;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 执行基本操作</span><br><span class="line">require([&quot;jquery&quot;,&quot;underscore&quot;],function($,_)&#123;</span><br><span class="line">  &#x2F;&#x2F; some code here</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="UMD"><a href="#UMD" class="headerlink" title="UMD"></a>UMD</h3><blockquote>
<p>UMD 本质上是兼容 CommonJS 与 AMD 这两种规范的代码语法糖，通过判断执行上下文中是否包含 define 或 module 来包装模块代码，适用于需要跨前后端的模块。<br>UMD（Universal Module Definition）是AMD和CommonJS的糅合，跨平台的解决方案。</p>
</blockquote>
<p>AMD模块以浏览器第一的原则发展，异步加载模块。<br>CommonJS模块以服务器第一原则发展，选择同步加载，它的模块无需包装(unwrapped modules)。<br>UMD先判断是否支持Node.js的模块（exports）是否存在，存在则使用Node.js模块模式。再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</p>
<h3 id="CMD和sea-js"><a href="#CMD和sea-js" class="headerlink" title="CMD和sea.js"></a>CMD和sea.js</h3><p>CMD是另一种js模块化方案，它与AMD很类似，不同点在于：AMD 推崇依赖前置、提前执行，CMD推崇依赖就近、延迟执行。此规范其实是在sea.js推广过程中产生的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** CMD写法 **&#x2F;</span><br><span class="line">define(function(require, exports, module) &#123;</span><br><span class="line">    var a &#x3D; require(&#39;.&#x2F;a&#39;); &#x2F;&#x2F;在需要时申明</span><br><span class="line">    a.doSomething();</span><br><span class="line">    if (false) &#123;</span><br><span class="line">        var b &#x3D; require(&#39;.&#x2F;b&#39;);</span><br><span class="line">        b.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="ES6-Module"><a href="#ES6-Module" class="headerlink" title="ES6 Module"></a>ES6 Module</h3><blockquote>
<p>此法为编译时加载，编译时遇到import就会生成一个只读引用。等到运行时就会根据此引用去被加载的模块取值。所以不会加载模块所有方法，仅取所需。</p>
</blockquote>
<p>ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，旨在成为浏览器和服务器通用的模块解决方案。其模块功能主要由两个命令构成：export和import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 定义模块 math.js **&#x2F;</span><br><span class="line">var basicNum &#x3D; 0;</span><br><span class="line">var add &#x3D; function (a, b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;;</span><br><span class="line">export &#123; basicNum, add &#125;;</span><br></pre></td></tr></table></figure>
<p>模块引用：通过 import 关键字引用其他模块。引用方式分为静态引用和动态引用。静态引用格式为import importClause from ModuleSpecifier，import 表达式需要写在文件最外层上下文中；动态引用的方式则是 import()，返回 promise 对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** 引用模块 **&#x2F;</span><br><span class="line">import &#123; basicNum, add &#125; from &#39;.&#x2F;math&#39;;</span><br><span class="line">function test(ele) &#123;</span><br><span class="line">    ele.textContent &#x3D; add(99 + basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上例所示，使用import命令的时候，用户需要知道所要加载的变量名或函数名。其实ES6还提供了export default命令，为模块指定默认输出，对应的import语句不需要使用大括号。这也更趋近于ADM的引用写法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;** export default **&#x2F;</span><br><span class="line">&#x2F;&#x2F;定义输出</span><br><span class="line">export default &#123; basicNum, add &#125;;</span><br><span class="line">&#x2F;&#x2F;引入</span><br><span class="line">import math from &#39;.&#x2F;math&#39;;</span><br><span class="line">function test(ele) &#123;</span><br><span class="line">    ele.textContent &#x3D; math.add(99 + math.basicNum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复制代码ES6的模块不是对象，import命令会被 JavaScript 引擎静态分析，在编译时就引入模块代码，而不是在代码运行时加载，所以无法实现条件加载。也正因为这个，使得静态分析成为可能。</p>
<p>五、 ES6 模块与 CommonJS 模块的差异</p>
<ol>
<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。<br>CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。<br>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的import有点像 Unix 系统的“符号连接”，原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</li>
<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li>
</ol>
<p>运行时加载: CommonJS 模块就是对象；即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。</p>
<p>编译时加载: ES6 模块不是对象，而是通过 export 命令显式指定输出的代码，import时采用静态命令的形式。即在import时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。</p>
<p>CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>CommonJS与AMD/CMD:</p>
<ul>
<li>AMD/CMD是CommonJS在浏览器端的解决方案。</li>
<li>CommonJS是同步加载（代码在本地，加载时间基本等于硬盘读取时间）。</li>
<li>AMD/CMD是异步加载（浏览器必须这么做，代码在服务端）</li>
</ul>
]]></content>
      <categories>
        <category>Frontend前端</category>
        <category>模块化</category>
      </categories>
      <tags>
        <tag>模块化</tag>
      </tags>
  </entry>
</search>
